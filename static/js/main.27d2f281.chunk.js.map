{"version":3,"sources":["logo.svg","api/config.js","images/Logo.png","pages/Scan.js","App.js","reportWebVitals.js","index.js"],"names":["type","project_id","private_key_id","private_key","client_email","client_id","auth_uri","token_uri","auth_provider_x509_cert_url","client_x509_cert_url","doc","GoogleSpreadsheet","require","Scan","props","useState","todaySheet","setTodaySheet","Date","toLocaleDateString","todayDate","isWorking","setIsWorking","findStudentRow","ID","a","getRows","rows","row","rowNumber","getCurrentTime","toLocaleTimeString","hour12","hour","minute","data","text","studentNumber","studentRowNumber","currentTime","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","todaySheetRows","workingRow","parseInt","save","success","warn","useEffect","useServiceAccountAuth","config","loadInfo","sheetsByTitle","tS","warning","initializeWorker","style","display","justifyContent","flexDirection","marginTop","marginBottom","height","marginRight","src","Logo","textAlign","margin","overflow","delay","width","onError","err","console","onScan","facingMode","App","className","newestOnTop","rtl","pauseOnFocusLoss","Zoom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27d2f281.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default {\r\n    type: \"service_account\",\r\n    project_id: \"checkinout-264819\",\r\n    private_key_id: \"49b07528555b308684702bfe99ddbbe1bce990b0\",\r\n    private_key:\r\n        \"-----BEGIN PRIVATE KEY-----\\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDYwK3SuzBVVPi6\\npTN9gyZ0uGvaLxz7+4EV8BoZfg9JGY4mqhm+8HhE4en4DoY5Subw64zwiNZvE1ZO\\nrcJFOKtbQsEG8mL+vjg8PmqZXh4KjHOH23H8njFusGlXF5r1+rJ1zU2DOUYAruGH\\nfHCyNJyb9ifs9V+JgXNa+N+oWw6/8yI1q1w3nFnAIQbf8rnVtg0VdkRkKmd9TS/z\\n7XtuZ76UcR3NsqbscAFmG7nIpRGeIxlnpLAjdNsuOgW2jkaFFW/EvpnCpC9WDYqz\\nTbI6BRasHoj1JXcV1RFmgpTOH7Ykfh2WJfP+79ikmWS9qDjWl077VoqfbP6JRQSN\\nL9jCGvJXAgMBAAECggEARdzIygDqob5rEyG3OG/Cv+FHZgJEedWFNFB44RmYDKwv\\nfLfb54azhSQ52Om5ipLhX+rUOR0p3JBjg6WO1effl2ErPTV4AfrGvmgxzLAgx66g\\neDwbf9xvO2mh8l/Z4wnEZqLfJnoZ3ZOAfr51xoKdrclH8iDeg8AVMc/Aqw96cBRx\\n9uqQH4Ltm7PAL/ssCpTWPm8cta2c7be+j8HTtlg9vG+hS+AEYyatgQi7qE7gK0rL\\nqXk3m4/7E6qISUqlCZCJ85D1nHCVB66eZwkeZbFsZOZkgBQCNwTdSlrJ/I7Iz+S4\\njkPnmscG0Re2M871Ke9Vboim39XS6uGSJCdFDeZGmQKBgQD+eY3A91N5dWKDttB6\\nClQUKoVhGKpqgNefnDUWGvwWq4Zb45V4UJsdob29f3dy5jBLL7ZOFlowjgz+9PC1\\npXoqDCgoucqHQkZIJ6ONBEemJ+P3K1ClFd8tkV/QCiPL9eqlzb+6SEDvXBErmp9w\\n3Sxp7erRHR1hMHw3HCNIxa6ymQKBgQDaDT9QxxeOOzP5Fv/FEPdyV8LTvIUNgba+\\nW/gsaXjUGCQggTyV9x5kC9fj5sm9Zv+olDuFUI7/PwoFSTS7FpJ/cxjj99/7rzer\\nq/ZI+dlccXVvBM2i2Ykdyj1cLb67iHCF1c9IR1ewLqhDRjn908gJ2p9Ey5G1r41N\\nkbSRherSbwKBgQCXlNRpg2nHybJ6/uTELW7T7Fgy9Dxe4IyQWL4OgthysI2CItig\\nKHOdfQDG5izC1nch8jPH4+ypS5RWMpVHvmA8t60cRT9svn+a73GuyEPdp5lVXAnX\\nrGWagSPvinq0PbIePabdUbjMW60mqh4bXsPb/YqIMa2UfQsg0LP73zUm0QKBgQDO\\naB3YRC4bGBWxo8DHdbEWjtbBAcJdL72h4oNA3zJeat+/2TZVqxAcmk1p0WyEmrxF\\ngtP49XH3UmAU8uA0fUB93qDgIyLmJ02mduhy2feUl14Xkk9p6UvvZCLDYBYdhSEm\\nv2cwvz/VacUjsZVxngjMsyNyxtSOTLiQhe2Ml1zahwKBgQCFPBuGF/n6l5XW0JhQ\\n1CVr629oGsHNPWdnxGAAb0DLQleKJx4IIGwIhhwtajn5tZUS8AjNQPmYnCpLUOPa\\nROBQVlP4nhdOVaYkEwzAp/IbuuVm25ss4Y1+GjGVLKnVm5bFnVPjzK2rp0wByO2b\\n13OmmjWwqik4xsM8bNmUxWQzsw==\\n-----END PRIVATE KEY-----\\n\",\r\n    client_email: \"sheet-reader@checkinout-264819.iam.gserviceaccount.com\",\r\n    client_id: \"104178988975545314029\",\r\n    auth_uri: \"https://accounts.google.com/o/oauth2/auth\",\r\n    token_uri: \"https://oauth2.googleapis.com/token\",\r\n    auth_provider_x509_cert_url: \"https://www.googleapis.com/oauth2/v1/certs\",\r\n    client_x509_cert_url:\r\n        \"https://www.googleapis.com/robot/v1/metadata/x509/sheet-reader%40checkinout-264819.iam.gserviceaccount.com\",\r\n};\r\n","export default __webpack_public_path__ + \"static/media/Logo.f0526f33.png\";","import React, { useEffect, useState } from \"react\";\r\nimport QrReader from \"react-qr-scanner\";\r\nimport config from \"../api/config\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Logo from \"../images/Logo.png\";\r\n\r\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\r\n\r\nconst doc = new GoogleSpreadsheet(\r\n    \"1sj8Hk1nN-pushHCR-pKLoNJWHQMIOnL1SBTueItOLvQ\"\r\n);\r\n\r\nfunction Scan(props) {\r\n    const [todaySheet, setTodaySheet] = useState({});\r\n    const [todayDate, setTodayDate] = useState(new Date().toLocaleDateString());\r\n\r\n    const [isWorking, setIsWorking] = useState(false);\r\n\r\n    useEffect(\r\n        function () {\r\n            async function initializeWorker() {\r\n                await doc.useServiceAccountAuth(config);\r\n                await doc.loadInfo(); // loads document properties and worksheets\r\n\r\n                if (!doc.sheetsByTitle[todayDate]) {\r\n                    toast.warning(\r\n                        `Please create the spreadsheet for today and reload the app to check in!`,\r\n                        {\r\n                            position: \"bottom-center\",\r\n                            autoClose: 300000,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                        }\r\n                    );\r\n                    toast.error(\r\n                        `❗ Could not find spreadsheet with today's date!`,\r\n                        {\r\n                            position: \"bottom-center\",\r\n                            autoClose: 300000,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                        }\r\n                    );\r\n                } else {\r\n                    const tS = doc.sheetsByTitle[todayDate];\r\n                    setTodaySheet(tS);\r\n\r\n                    toast.success(`✅ Ready to check in!`, {\r\n                        position: \"bottom-center\",\r\n                        autoClose: 3000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                    });\r\n                }\r\n            }\r\n            initializeWorker();\r\n        },\r\n        [todayDate]\r\n    );\r\n\r\n    async function findStudentRow(ID) {\r\n        const rows = await todaySheet.getRows();\r\n        for (const row of rows) {\r\n            if (row[\"ID\"] == ID) {\r\n                return row.rowNumber;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function getCurrentTime() {\r\n        return new Date().toLocaleTimeString(\"en-US\", {\r\n            hour12: true,\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n        });\r\n    }\r\n\r\n    async function handleScan(data) {\r\n        if (data && data.text) {\r\n            if (isWorking) return; // Check if still checking in someone\r\n\r\n            setIsWorking(true);\r\n\r\n            // Locate student in the spreadsheet today\r\n            let studentNumber = data.text;\r\n            let studentRowNumber = await findStudentRow(studentNumber);\r\n            const currentTime = getCurrentTime();\r\n\r\n            if (studentRowNumber === null) {\r\n                // Student does not exist\r\n                toast.error(`❗ Student ID could not be found!`, {\r\n                    position: \"bottom-center\",\r\n                    autoClose: 3000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            } else {\r\n                // Student ID is found\r\n                let todaySheetRows = await todaySheet.getRows();\r\n                let workingRow = todaySheetRows[parseInt(studentRowNumber) - 2];\r\n\r\n                // Determine action to take\r\n                if (!workingRow[\"Check in\"]) {\r\n                    // Check student in\r\n                    workingRow[\"Check in\"] = currentTime;\r\n                    await workingRow.save();\r\n\r\n                    toast.success(\r\n                        `👋 Checked in ${workingRow[\"이름\"]} at ${currentTime}!`,\r\n                        {\r\n                            position: \"bottom-center\",\r\n                            autoClose: 3000,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                        }\r\n                    );\r\n                } else if (!workingRow[\"Check out\"]) {\r\n                    // Check student out\r\n                    workingRow[\"Check out\"] = currentTime;\r\n                    await workingRow.save();\r\n\r\n                    toast.success(\r\n                        `🚪 Checked out ${workingRow[\"이름\"]} at ${currentTime}!`,\r\n                        {\r\n                            position: \"bottom-center\",\r\n                            autoClose: 3000,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                        }\r\n                    );\r\n                } else {\r\n                    // Student check in and out are both filled\r\n                    toast.warn(\r\n                        `🟡 ${workingRow[\"이름\"]} is already accounted for!`,\r\n                        {\r\n                            position: \"bottom-center\",\r\n                            autoClose: 3000,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n            setIsWorking(false);\r\n        }\r\n    }\r\n\r\n    function handleError(err) {\r\n        console.error(err);\r\n    }\r\n\r\n    const previewStyle = {\r\n        height: \"100%\",\r\n        width: \"auto\",\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    flexDirection: \"row\",\r\n                    marginTop: \"1rem\",\r\n                    marginBottom: \"1rem\",\r\n                }}\r\n            >\r\n                <img\r\n                    style={{ height: \"3rem\", marginRight: \"1rem\" }}\r\n                    src={Logo}\r\n                ></img>\r\n                <h1 style={{ textAlign: \"center\", margin: 0 }}>\r\n                    SVKS Check In/Out\r\n                </h1>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    overflow: \"hidden\",\r\n                    height: \"calc(100vh - 10rem)\",\r\n                }}\r\n            >\r\n                <QrReader\r\n                    delay={100}\r\n                    style={previewStyle}\r\n                    onError={handleError}\r\n                    onScan={handleScan}\r\n                    facingMode={\"rear\"}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scan;\r\n","import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Scan from \"./pages/Scan\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Zoom } from \"react-toastify\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Scan></Scan>\r\n\r\n            <ToastContainer\r\n                position=\"bottom-center\"\r\n                autoClose={3000}\r\n                hideProgressBar={false}\r\n                newestOnTop\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n                pauseOnFocusLoss={false}\r\n                transition={Zoom}\r\n                icon={false}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}