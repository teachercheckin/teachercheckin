{"version":3,"sources":["logo.svg","api/config.js","images/Logo.png","components/Reader.js","api/spreadsheetID.js","pages/Scan.js","components/ToPrint.js","pages/Print.js","App.js","reportWebVitals.js","index.js"],"names":["type","project_id","private_key_id","private_key","client_email","client_id","auth_uri","token_uri","auth_provider_x509_cert_url","client_x509_cert_url","Reader","props","video","useRef","canvasRef","useState","delayed","setDelayed","result","setResult","black","setBlack","tick","current","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","canvas","getContext","drawImage","imageData","getImageData","code","jsQR","data","inversionAttempts","console","log","time","Date","myFunc","setTimeout","useEffect","onScan","inter","setInterval","requestAnimationFrame","clearInterval","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","setAttribute","play","style","filter","ref","hidden","spreadsheetID","doc","GoogleSpreadsheet","require","dateFormatOptions","year","month","day","Scan","todaySheet","setTodaySheet","toLocaleDateString","setTodayDate","isWorking","setIsWorking","findStudentRow","ID","a","Object","keys","length","getRows","rows","row","rowNumber","getCurrentTime","toLocaleTimeString","hour12","hour","minute","studentNumber","studentRowNumber","currentTime","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","todaySheetRows","workingRow","parseInt","save","success","warn","useServiceAccountAuth","config","loadInfo","tD","option","sheetsByTitle","tS","warning","initializeWorker","display","justifyContent","flexDirection","marginTop","marginBottom","marginRight","src","Logo","textAlign","margin","overflow","ToPrint","React","forwardRef","className","children","dateDiffInDays","b","utc1","UTC","getFullYear","getMonth","getDate","utc2","Math","abs","floor","Print","todayRows","setTodayRows","QRValue","setQRValue","inputText","setInputText","useDebounce","searchQuery","searchResults","setSearchResults","selectedCodes","setSelectedCodes","printRef","handlePrint","useReactToPrint","content","findMostRecentSheetDate","sheetDate","today","sheetDateString","setDate","findStudents","text","results","includes","resultString","resultObject","name","id","push","ts","sr","alignItems","backgroundColor","fontSize","placeholder","border","borderRadius","outline","padding","boxSizing","value","onChange","event","target","map","onClick","userSelect","cursor","size","c","App","path","element","newestOnTop","rtl","pauseOnFocusLoss","Zoom","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.500d8fd5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default {\r\n    type: \"service_account\",\r\n    project_id: \"checkinout-264819\",\r\n    private_key_id: \"49b07528555b308684702bfe99ddbbe1bce990b0\",\r\n    private_key:\r\n        \"-----BEGIN PRIVATE KEY-----\\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDYwK3SuzBVVPi6\\npTN9gyZ0uGvaLxz7+4EV8BoZfg9JGY4mqhm+8HhE4en4DoY5Subw64zwiNZvE1ZO\\nrcJFOKtbQsEG8mL+vjg8PmqZXh4KjHOH23H8njFusGlXF5r1+rJ1zU2DOUYAruGH\\nfHCyNJyb9ifs9V+JgXNa+N+oWw6/8yI1q1w3nFnAIQbf8rnVtg0VdkRkKmd9TS/z\\n7XtuZ76UcR3NsqbscAFmG7nIpRGeIxlnpLAjdNsuOgW2jkaFFW/EvpnCpC9WDYqz\\nTbI6BRasHoj1JXcV1RFmgpTOH7Ykfh2WJfP+79ikmWS9qDjWl077VoqfbP6JRQSN\\nL9jCGvJXAgMBAAECggEARdzIygDqob5rEyG3OG/Cv+FHZgJEedWFNFB44RmYDKwv\\nfLfb54azhSQ52Om5ipLhX+rUOR0p3JBjg6WO1effl2ErPTV4AfrGvmgxzLAgx66g\\neDwbf9xvO2mh8l/Z4wnEZqLfJnoZ3ZOAfr51xoKdrclH8iDeg8AVMc/Aqw96cBRx\\n9uqQH4Ltm7PAL/ssCpTWPm8cta2c7be+j8HTtlg9vG+hS+AEYyatgQi7qE7gK0rL\\nqXk3m4/7E6qISUqlCZCJ85D1nHCVB66eZwkeZbFsZOZkgBQCNwTdSlrJ/I7Iz+S4\\njkPnmscG0Re2M871Ke9Vboim39XS6uGSJCdFDeZGmQKBgQD+eY3A91N5dWKDttB6\\nClQUKoVhGKpqgNefnDUWGvwWq4Zb45V4UJsdob29f3dy5jBLL7ZOFlowjgz+9PC1\\npXoqDCgoucqHQkZIJ6ONBEemJ+P3K1ClFd8tkV/QCiPL9eqlzb+6SEDvXBErmp9w\\n3Sxp7erRHR1hMHw3HCNIxa6ymQKBgQDaDT9QxxeOOzP5Fv/FEPdyV8LTvIUNgba+\\nW/gsaXjUGCQggTyV9x5kC9fj5sm9Zv+olDuFUI7/PwoFSTS7FpJ/cxjj99/7rzer\\nq/ZI+dlccXVvBM2i2Ykdyj1cLb67iHCF1c9IR1ewLqhDRjn908gJ2p9Ey5G1r41N\\nkbSRherSbwKBgQCXlNRpg2nHybJ6/uTELW7T7Fgy9Dxe4IyQWL4OgthysI2CItig\\nKHOdfQDG5izC1nch8jPH4+ypS5RWMpVHvmA8t60cRT9svn+a73GuyEPdp5lVXAnX\\nrGWagSPvinq0PbIePabdUbjMW60mqh4bXsPb/YqIMa2UfQsg0LP73zUm0QKBgQDO\\naB3YRC4bGBWxo8DHdbEWjtbBAcJdL72h4oNA3zJeat+/2TZVqxAcmk1p0WyEmrxF\\ngtP49XH3UmAU8uA0fUB93qDgIyLmJ02mduhy2feUl14Xkk9p6UvvZCLDYBYdhSEm\\nv2cwvz/VacUjsZVxngjMsyNyxtSOTLiQhe2Ml1zahwKBgQCFPBuGF/n6l5XW0JhQ\\n1CVr629oGsHNPWdnxGAAb0DLQleKJx4IIGwIhhwtajn5tZUS8AjNQPmYnCpLUOPa\\nROBQVlP4nhdOVaYkEwzAp/IbuuVm25ss4Y1+GjGVLKnVm5bFnVPjzK2rp0wByO2b\\n13OmmjWwqik4xsM8bNmUxWQzsw==\\n-----END PRIVATE KEY-----\\n\",\r\n    client_email: \"sheet-reader@checkinout-264819.iam.gserviceaccount.com\",\r\n    client_id: \"104178988975545314029\",\r\n    auth_uri: \"https://accounts.google.com/o/oauth2/auth\",\r\n    token_uri: \"https://oauth2.googleapis.com/token\",\r\n    auth_provider_x509_cert_url: \"https://www.googleapis.com/oauth2/v1/certs\",\r\n    client_x509_cert_url:\r\n        \"https://www.googleapis.com/robot/v1/metadata/x509/sheet-reader%40checkinout-264819.iam.gserviceaccount.com\",\r\n};\r\n","export default __webpack_public_path__ + \"static/media/Logo.f0526f33.png\";","import React, { useEffect, useRef, useState } from \"react\";\r\nimport jsQR from \"jsqr\";\r\n\r\nfunction Reader(props) {\r\n    const video = useRef();\r\n    const canvasRef = useRef();\r\n    const [delayed, setDelayed] = useState(false);\r\n    const [result, setResult] = useState();\r\n    const [black, setBlack] = useState(false);\r\n\r\n    useEffect(\r\n        function () {\r\n            if (result) {\r\n                props.onScan(result.data);\r\n                setBlack(true);\r\n                setTimeout(() => {\r\n                    setBlack(false);\r\n                }, 500);\r\n                setResult(null);\r\n            }\r\n        },\r\n        [result]\r\n    );\r\n\r\n    useEffect(function () {\r\n        const inter = setInterval(() => {\r\n            requestAnimationFrame(tick);\r\n        }, 200);\r\n        return () => {\r\n            clearInterval(inter);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(\r\n        function () {\r\n            navigator.mediaDevices\r\n                .getUserMedia({ video: { facingMode: \"environment\" } })\r\n                .then(function (stream) {\r\n                    console.log(stream);\r\n                    try {\r\n                        video.current.srcObject = stream;\r\n                        video.current.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\r\n                        video.current.play();\r\n                    } catch {}\r\n                });\r\n        },\r\n        [video, canvasRef]\r\n    );\r\n\r\n    function tick() {\r\n        if (delayed) return;\r\n        if (video.current.readyState === video.current.HAVE_ENOUGH_DATA) {\r\n            canvasRef.current.height = video.current.videoHeight;\r\n            canvasRef.current.width = video.current.videoWidth;\r\n\r\n            var canvas = canvasRef.current.getContext(\"2d\");\r\n\r\n            canvas.drawImage(\r\n                video.current,\r\n                0,\r\n                0,\r\n                canvasRef.current.width,\r\n                canvasRef.current.height\r\n            );\r\n            var imageData = canvas.getImageData(\r\n                0,\r\n                0,\r\n                canvasRef.current.width,\r\n                canvasRef.current.height\r\n            );\r\n            var code = jsQR(imageData.data, imageData.width, imageData.height, {\r\n                inversionAttempts: \"dontInvert\",\r\n            });\r\n            if (code) {\r\n                console.log(code.data);\r\n                setResult({ data: code.data, time: new Date() });\r\n                // props.onScan(code.data);\r\n                props.myFunc();\r\n                // setTimeout(() => {\r\n                //     requestAnimationFrame(tick);\r\n                // }, 1000);\r\n                setDelayed(true);\r\n                setTimeout(() => {\r\n                    setDelayed(false);\r\n                }, 3000);\r\n            } else {\r\n                // setTimeout(() => {\r\n                //     requestAnimationFrame(tick);\r\n                // }, 10);\r\n            }\r\n            return;\r\n        } else {\r\n            // setTimeout(() => {\r\n            //     requestAnimationFrame(tick);\r\n            // }, 10);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <video\r\n                style={{\r\n                    height: \"100%\",\r\n                    width: \"auto\",\r\n                    filter: black ? \"brightness(0%)\" : \"brightness(100%)\",\r\n                }}\r\n                ref={video}\r\n            ></video>\r\n            <canvas ref={canvasRef} hidden></canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Reader;\r\n","export const spreadsheetID = \"1FqeRNFlZZ7aJdtYRmjZ1kRb2-sarN9aoTMGyu4jhGKs\";\r\n","import React, { useEffect, useState } from \"react\";\r\nimport QrReader from \"react-qr-scanner\";\r\nimport config from \"../api/config\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Logo from \"../images/Logo.png\";\r\nimport Reader from \"../components/Reader\";\r\nimport { spreadsheetID } from \"../api/spreadsheetID\";\r\n\r\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\r\n\r\nconst doc = new GoogleSpreadsheet(spreadsheetID);\r\nconst dateFormatOptions = [\r\n    { year: \"numeric\", month: \"numeric\", day: \"numeric\" },\r\n    { year: \"2-digit\", month: \"numeric\", day: \"numeric\" },\r\n    { year: \"numeric\", month: \"2-digit\", day: \"numeric\" },\r\n    { year: \"2-digit\", month: \"2-digit\", day: \"numeric\" },\r\n    { year: \"numeric\", month: \"numeric\", day: \"2-digit\" },\r\n    { year: \"2-digit\", month: \"numeric\", day: \"2-digit\" },\r\n    { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" },\r\n    { year: \"2-digit\", month: \"2-digit\", day: \"2-digit\" },\r\n];\r\n\r\nfunction Scan(props) {\r\n    const [todaySheet, setTodaySheet] = useState({});\r\n    const [todayDate, setTodayDate] = useState(new Date().toLocaleDateString());\r\n\r\n    const [isWorking, setIsWorking] = useState(false);\r\n\r\n    useEffect(function () {\r\n        async function initializeWorker() {\r\n            await doc.useServiceAccountAuth(config);\r\n            await doc.loadInfo(); // loads document properties and worksheets\r\n\r\n            let tD = new Date();\r\n\r\n            for (let option of dateFormatOptions) {\r\n                // console.log(tD.toLocaleDateString(\"en-US\", option));\r\n                if (doc.sheetsByTitle[tD.toLocaleDateString(\"en-US\", option)]) {\r\n                    tD = tD.toLocaleDateString(\"en-US\", option);\r\n                    const tS = doc.sheetsByTitle[tD];\r\n                    console.log(\"tS\");\r\n                    console.log(tS);\r\n                    setTodaySheet(tS);\r\n                    setTodayDate(tD);\r\n\r\n                    console.log(\"toasting sccess\");\r\n                    toast.success(`✅ Ready to check in!`, {\r\n                        position: \"bottom-center\",\r\n                        autoClose: 3000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                    });\r\n                    return;\r\n                }\r\n            }\r\n\r\n            toast.warning(\r\n                `Please create the spreadsheet for today and reload the app to check in!`,\r\n                {\r\n                    position: \"bottom-center\",\r\n                    autoClose: 300000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                }\r\n            );\r\n            toast.error(`❗ Could not find spreadsheet with today's date!`, {\r\n                position: \"bottom-center\",\r\n                autoClose: 300000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        }\r\n        initializeWorker();\r\n    }, []);\r\n\r\n    async function findStudentRow(ID) {\r\n        if (Object.keys(todaySheet).length === 0) return null;\r\n        console.log(\"finding student row\");\r\n        const rows = await todaySheet.getRows();\r\n        console.log(\"rows\");\r\n        console.log(rows);\r\n        console.log(\"ID\");\r\n        console.log(ID);\r\n\r\n        for (const row of rows) {\r\n            if (row[\"ID\"] == ID) {\r\n                console.log(row[\"ID\"]);\r\n                return row.rowNumber;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function getCurrentTime() {\r\n        return new Date().toLocaleTimeString(\"en-US\", {\r\n            hour12: true,\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n        });\r\n    }\r\n\r\n    async function handleScan(data) {\r\n        console.log(\"reached function\");\r\n        console.log(\"data\");\r\n        console.log(data);\r\n        if (data) {\r\n            console.log(\"handling scanning\");\r\n            if (isWorking) return; // Check if still checking in someone\r\n\r\n            setIsWorking(true);\r\n\r\n            // Locate student in the spreadsheet today\r\n            let studentNumber = data;\r\n            let studentRowNumber = await findStudentRow(studentNumber);\r\n            const currentTime = getCurrentTime();\r\n\r\n            if (studentRowNumber === null) {\r\n                // Student does not exist\r\n                toast.error(`❗ Student ID could not be found!`, {\r\n                    position: \"bottom-center\",\r\n                    autoClose: 3000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            } else {\r\n                // Student ID is found\r\n                let todaySheetRows = await todaySheet.getRows();\r\n                let workingRow = todaySheetRows[parseInt(studentRowNumber) - 2];\r\n\r\n                // Determine action to take\r\n                if (!workingRow[\"Check in\"]) {\r\n                    // Check student in\r\n                    workingRow[\"Check in\"] = currentTime;\r\n                    await workingRow.save();\r\n\r\n                    toast.success(\r\n                        `👋 Checked in ${workingRow[\"이름\"]} at ${currentTime}!`,\r\n                        {\r\n                            position: \"bottom-center\",\r\n                            autoClose: 3000,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                        }\r\n                    );\r\n                } else if (!workingRow[\"Check out\"]) {\r\n                    // Check student out\r\n                    workingRow[\"Check out\"] = currentTime;\r\n                    await workingRow.save();\r\n\r\n                    toast.success(\r\n                        `🚪 Checked out ${workingRow[\"이름\"]} at ${currentTime}!`,\r\n                        {\r\n                            position: \"bottom-center\",\r\n                            autoClose: 3000,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                        }\r\n                    );\r\n                } else {\r\n                    // Student check in and out are both filled\r\n                    toast.warn(\r\n                        `🟡 ${workingRow[\"이름\"]} is already accounted for!`,\r\n                        {\r\n                            position: \"bottom-center\",\r\n                            autoClose: 3000,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n            setIsWorking(false);\r\n        }\r\n    }\r\n\r\n    function handleError(err) {\r\n        console.error(err);\r\n    }\r\n\r\n    const previewStyle = {\r\n        height: \"100%\",\r\n        width: \"auto\",\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    flexDirection: \"row\",\r\n                    marginTop: \"1rem\",\r\n                    marginBottom: \"1rem\",\r\n                }}\r\n            >\r\n                <img\r\n                    style={{ height: \"3rem\", marginRight: \"1rem\" }}\r\n                    src={Logo}\r\n                ></img>\r\n                <h1 style={{ textAlign: \"center\", margin: 0 }}>\r\n                    SVKS Check In/Out\r\n                </h1>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    overflow: \"hidden\",\r\n                    height: \"calc(100vh - 10rem)\",\r\n                }}\r\n            >\r\n                {/* <QrReader\r\n                    delay={100}\r\n                    style={previewStyle}\r\n                    onError={handleError}\r\n                    onScan={handleScan}\r\n                    facingMode={\"rear\"}\r\n                /> */}\r\n\r\n                <Reader\r\n                    onScan={handleScan}\r\n                    myFunc={function () {\r\n                        console.log(\"helo\");\r\n                    }}\r\n                ></Reader>\r\n            </div>\r\n            {/* <h1\r\n                style={{\r\n                    textAlign: \"center\",\r\n                    margin: 0,\r\n                    color: \"lightgray\",\r\n                    fontSize: \"1rem\",\r\n                    marginTop: \"1rem\",\r\n                }}\r\n            >\r\n                v 1.1\r\n            </h1> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scan;\r\n","import React from \"react\";\r\nexport const ToPrint = React.forwardRef((props, ref) => {\r\n    return (\r\n        <div\r\n            className=\"toPrint\"\r\n            ref={ref}\r\n            style={{\r\n                width: \"100%\",\r\n                width: \"max(calc(100vw - 30rem), 80%)\",\r\n                // position: \"absolute\",\r\n                // // top: \"-100%\",\r\n                // zIndex: \"-100\",\r\n            }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ToPrint;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport QRCode from \"react-qr-code\";\r\nimport { toast } from \"react-toastify\";\r\nimport config from \"../api/config\";\r\nimport { spreadsheetID } from \"../api/spreadsheetID\";\r\nimport Logo from \"../images/Logo.png\";\r\nimport { useDebounce } from \"use-debounce\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { ToPrint } from \"../components/ToPrint\";\r\n\r\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\r\nconst doc = new GoogleSpreadsheet(spreadsheetID);\r\n\r\nconst _MS_PER_DAY = 1000 * 60 * 60 * 24;\r\nfunction dateDiffInDays(a, b) {\r\n    // https://stackoverflow.com/questions/3224834/get-difference-between-2-dates-in-javascript\r\n    // Discard the time and time-zone information.\r\n    const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\r\n    const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\r\n\r\n    return Math.abs(Math.floor((utc2 - utc1) / _MS_PER_DAY));\r\n}\r\n\r\nconst dateFormatOptions = [\r\n    { year: \"numeric\", month: \"numeric\", day: \"numeric\" },\r\n    { year: \"2-digit\", month: \"numeric\", day: \"numeric\" },\r\n    { year: \"numeric\", month: \"2-digit\", day: \"numeric\" },\r\n    { year: \"2-digit\", month: \"2-digit\", day: \"numeric\" },\r\n    { year: \"numeric\", month: \"numeric\", day: \"2-digit\" },\r\n    { year: \"2-digit\", month: \"numeric\", day: \"2-digit\" },\r\n    { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" },\r\n    { year: \"2-digit\", month: \"2-digit\", day: \"2-digit\" },\r\n];\r\n\r\nfunction Print(props) {\r\n    const [todaySheet, setTodaySheet] = useState({});\r\n    const [todayRows, setTodayRows] = useState({});\r\n    const [QRValue, setQRValue] = useState(\"\");\r\n    const [inputText, setInputText] = useState(\"\");\r\n    const [searchQuery] = useDebounce(inputText, 50);\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [selectedCodes, setSelectedCodes] = useState([]);\r\n\r\n    const printRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    function findMostRecentSheetDate() {\r\n        let sheetDate = new Date();\r\n        let today = new Date();\r\n        let sheetDateString = null;\r\n        while (!sheetDateString) {\r\n            for (let option of dateFormatOptions) {\r\n                if (\r\n                    doc.sheetsByTitle[\r\n                        sheetDate.toLocaleDateString(\"en-US\", option)\r\n                    ]\r\n                ) {\r\n                    sheetDateString = sheetDate.toLocaleDateString(\r\n                        \"en-US\",\r\n                        option\r\n                    );\r\n                    break;\r\n                }\r\n            }\r\n            sheetDate.setDate(sheetDate.getDate() - 1);\r\n            if (dateDiffInDays(today, sheetDate) > 400) break;\r\n        }\r\n        return sheetDateString;\r\n    }\r\n\r\n    useEffect(function () {\r\n        async function initializeWorker() {\r\n            await doc.useServiceAccountAuth(config);\r\n            await doc.loadInfo(); // loads document properties and worksheets\r\n\r\n            // find today sheet\r\n\r\n            let sheetDate = findMostRecentSheetDate();\r\n\r\n            if (!doc.sheetsByTitle[sheetDate]) {\r\n                toast.error(`❗ Could not find data to use.`, {\r\n                    position: \"bottom-center\",\r\n                    autoClose: 300000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            } else {\r\n                let ts = doc.sheetsByTitle[sheetDate];\r\n                setTodaySheet(ts);\r\n                const rows = await ts.getRows();\r\n                setTodayRows(rows);\r\n\r\n                toast.success(`✅ Found ID data.`, {\r\n                    position: \"bottom-center\",\r\n                    autoClose: 3000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            }\r\n        }\r\n        initializeWorker();\r\n    }, []);\r\n\r\n    useEffect(\r\n        async function () {\r\n            if (searchQuery) {\r\n                let sr = await findStudents(searchQuery);\r\n                if (sr.length === 1) {\r\n                    setQRValue(sr[0]);\r\n                }\r\n                if (sr.length > 0) setSearchResults(sr);\r\n            } else {\r\n                setQRValue({});\r\n                setSearchResults([]);\r\n            }\r\n        },\r\n        [searchQuery]\r\n    );\r\n\r\n    async function findStudents(text) {\r\n        let results = [];\r\n\r\n        for (const row of todayRows) {\r\n            if (results.length > 4) break;\r\n            if (\r\n                (row[\"ID\"] + \"\").includes(text) ||\r\n                row[\"이름\"]?.includes(text)\r\n            ) {\r\n                let resultString = `${row[\"이름\"]}:  ${row[\"ID\"]}`;\r\n                let resultObject = {\r\n                    text: resultString,\r\n                    name: row[\"이름\"],\r\n                    id: row[\"ID\"],\r\n                };\r\n                results.push(resultObject);\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                flexDirection: \"column\",\r\n                backgroundColor: \"white\",\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    flexDirection: \"row\",\r\n                    marginTop: \"1rem\",\r\n                    marginBottom: \"1rem\",\r\n                }}\r\n            >\r\n                <img\r\n                    style={{ height: \"3rem\", marginRight: \"1rem\" }}\r\n                    src={Logo}\r\n                ></img>\r\n                <h1 style={{ textAlign: \"center\", margin: 0 }}>\r\n                    Print QR Codes\r\n                </h1>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    marginTop: \"4rem\",\r\n                    marginBottom: \"4rem\",\r\n                    width: \"max(calc(100vw - 30rem), 80%)\",\r\n                    fontSize: \"1.5rem\",\r\n                }}\r\n            >\r\n                <input\r\n                    placeholder={\"Search for student or enter a number...\"}\r\n                    style={{\r\n                        width: \"100%\",\r\n                        fontSize: \"1.5rem\",\r\n                        border: \"2px solid lightgray\",\r\n                        borderRadius: \"1rem\",\r\n                        outline: \"none\",\r\n                        padding: \"1rem\",\r\n                        boxSizing: \"border-box\",\r\n                        textAlign: \"center\",\r\n                    }}\r\n                    value={inputText}\r\n                    onChange={(event) => {\r\n                        setInputText(event.target.value);\r\n                    }}\r\n                ></input>\r\n\r\n                {searchResults.map((result) => {\r\n                    return (\r\n                        <div\r\n                            onClick={function () {\r\n                                // setQRValue(result.id);\r\n                                // setInputText(result.name);\r\n                                // function () {\r\n                                setSelectedCodes([...selectedCodes, result]);\r\n                                // console.log(QRValue);\r\n                                // }\r\n                            }}\r\n                            style={{\r\n                                width: \"100%\",\r\n                                marginTop: \"0.5rem\",\r\n                                border: \"1px solid lightgray\",\r\n                                borderRadius: \"1rem\",\r\n                                padding: \"0.5rem\",\r\n                                boxSizing: \"border-box\",\r\n                                userSelect: \"none\",\r\n                                cursor: \"pointer\",\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                                justifyContent: \"center\",\r\n                            }}\r\n                        >\r\n                            <h4\r\n                                style={{\r\n                                    marginRight: \"2rem\",\r\n                                    marginTop: 0,\r\n                                    marginBottom: 0,\r\n                                }}\r\n                            >\r\n                                {result.text}\r\n                            </h4>\r\n                            {QRValue.id && (\r\n                                <QRCode size={50} value={QRValue.id} />\r\n                            )}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            {/* {QRValue && QRValue.id && <QRCode value={QRValue.id} />}\r\n            <button\r\n                style={{\r\n                    marginTop: \"2rem\",\r\n                    marginBottom: \"2rem\",\r\n                    border: \"2px solid lightgray\",\r\n                    borderRadius: \"1rem\",\r\n                    padding: \"0.5rem\",\r\n                    width: \"10rem\",\r\n                }}\r\n                onClick={function () {\r\n                    setSelectedCodes([...selectedCodes, QRValue]);\r\n                    console.log(QRValue);\r\n                }}\r\n            >\r\n                Select\r\n            </button> */}\r\n\r\n            {/* {QRValue && (\r\n                <>\r\n                </>\r\n            )} */}\r\n\r\n            {/* <h1 style={{ textAlign: \"center\", margin: 0 }}>{QRValue.text}</h1> */}\r\n            {/* <h1 style={{ textAlign: \"center\", margin: 0 }}>To print: </h1> */}\r\n            {selectedCodes.length > 0 && (\r\n                <>\r\n                    <div\r\n                        style={{\r\n                            width: \"100%\",\r\n                            width: \"max(calc(100vw - 30rem), 80%)\",\r\n                            boxSizing: \"border-box\",\r\n                            padding: \"1rem\",\r\n                            display: \"grid\",\r\n                            gridTemplateColumns:\r\n                                \"repeat(auto-fill, minmax(150px, 1fr))\",\r\n                            gap: \"1rem\",\r\n                        }}\r\n                    >\r\n                        {selectedCodes.map((code) => (\r\n                            <div\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"column\",\r\n                                    alignItems: \"center\",\r\n                                }}\r\n                            >\r\n                                <QRCode size={100} value={code.id} />\r\n                                <p\r\n                                    style={{\r\n                                        marginTop: \"0.5rem\",\r\n                                        marginBottom: 0,\r\n                                    }}\r\n                                >\r\n                                    {code.text}\r\n                                </p>\r\n                                <button\r\n                                    style={{\r\n                                        marginTop: \"0.5rem\",\r\n                                        border: \"2px solid lightgray\",\r\n                                        borderRadius: \"1rem\",\r\n                                        padding: \"0.5rem\",\r\n                                        boxSizing: \"border-box\",\r\n                                        width: \"3rem\",\r\n                                    }}\r\n                                    onClick={function () {\r\n                                        setSelectedCodes(\r\n                                            selectedCodes.filter(\r\n                                                (c) => c.id != code.id\r\n                                            )\r\n                                        );\r\n                                    }}\r\n                                >\r\n                                    X\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <ToPrint ref={printRef}>\r\n                        <div\r\n                            style={{\r\n                                width: \"100%\",\r\n                                // width: \"max(calc(100vw - 30rem), 80%)\",\r\n                                boxSizing: \"border-box\",\r\n                                // padding: \"1rem\",\r\n                                // display: \"grid\",\r\n                                // gridTemplateColumns:\r\n                                //     \"repeat(auto-fill, minmax(150px, 1fr))\",\r\n                                // gap: \"3rem\",\r\n                                display: \"block\",\r\n                            }}\r\n                        >\r\n                            {selectedCodes.map((code) => (\r\n                                <div\r\n                                    style={{\r\n                                        display: \"flex\",\r\n                                        flexDirection: \"column\",\r\n                                        alignItems: \"center\",\r\n                                        // float: \"left\",\r\n                                        display: \"inline-block\",\r\n                                        boxSizing: \"border-box\",\r\n                                        padding: \"1rem\",\r\n                                    }}\r\n                                >\r\n                                    <QRCode\r\n                                        style={{ margin: \"2rem\" }}\r\n                                        size={160}\r\n                                        value={code.id}\r\n                                    />\r\n                                    <p\r\n                                        style={{\r\n                                            marginTop: \"0.5rem\",\r\n                                            marginBottom: 0,\r\n                                            textAlign: \"center\",\r\n                                        }}\r\n                                    >\r\n                                        {code.text}\r\n                                    </p>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </ToPrint>\r\n                    <button\r\n                        style={{\r\n                            marginBottom: \"1rem\",\r\n                            marginTop: \"1rem\",\r\n                            border: \"2px solid lightgray\",\r\n                            borderRadius: \"1rem\",\r\n                            padding: \"0.5rem\",\r\n                            boxSizing: \"border-box\",\r\n                            width: \"min(30rem, 80%)\",\r\n                        }}\r\n                        onClick={handlePrint}\r\n                    >\r\n                        Print codes.\r\n                    </button>\r\n                </>\r\n            )}\r\n            {/* <h1\r\n                style={{\r\n                    textAlign: \"center\",\r\n                    margin: 0,\r\n                    color: \"lightgray\",\r\n                    fontSize: \"1rem\",\r\n                    marginTop: \"1rem\",\r\n                    marginBottom: \"1rem\",\r\n                }}\r\n            >\r\n                v 1.1\r\n            </h1> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Print;\r\n","import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Scan from \"./pages/Scan\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Zoom } from \"react-toastify\";\r\nimport { HashRouter as Router, Routes, Route, Link } from \"react-router-dom\";\r\nimport Print from \"./pages/Print\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Scan />} />\r\n                    <Route path=\"print\" element={<Print />} />\r\n                </Routes>\r\n\r\n                <ToastContainer\r\n                    position=\"bottom-center\"\r\n                    autoClose={3000}\r\n                    hideProgressBar={false}\r\n                    newestOnTop\r\n                    closeOnClick\r\n                    rtl={false}\r\n                    pauseOnFocusLoss\r\n                    draggable\r\n                    pauseOnHover\r\n                    pauseOnFocusLoss={false}\r\n                    transition={Zoom}\r\n                    icon={false}\r\n                />\r\n\r\n                <h1\r\n                    style={{\r\n                        textAlign: \"center\",\r\n                        margin: 0,\r\n                        color: \"lightgray\",\r\n                        fontSize: \"1rem\",\r\n                        marginTop: \"1rem\",\r\n                        marginBottom: \"1rem\",\r\n                    }}\r\n                >\r\n                    v 1.6\r\n                </h1>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}