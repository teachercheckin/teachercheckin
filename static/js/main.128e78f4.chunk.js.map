{"version":3,"sources":["components/Reader.js","images/Logo.png","api/spreadsheetID.js","pages/Scan.js","components/ToPrint.js","pages/Print.js","App.js","reportWebVitals.js","index.js"],"names":["delayCount","Reader","props","video","useRef","canvasRef","useState","result","setResult","black","setBlack","tick","periodic","setTimeout","current","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","canvas","getContext","drawImage","imageData","getImageData","code","jsQR","data","inversionAttempts","console","log","time","Date","useEffect","onScan","inter","setInterval","requestAnimationFrame","clearInterval","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","setAttribute","play","style","filter","ref","hidden","spreadsheetID","production","development","GoogleSpreadsheet","require","todaySheet","doc","ASCII_A","dateFormatOptions","year","month","day","scanList","scanHistory","recentList","idList","columnIndex","shutter","String","prototype","format","formatted","this","i","arguments","length","regexp","RegExp","replace","recentCount","addToRecentList","value","push","shift","createHeader","tS","idIdx","nameIdx","classIdx","checkInIdx","checkOutIdx","Math","min","columnCount","entry","getCell","valueType","findHeader","header","name","id","class","checkIn","checkOut","createIds","rowIdx","ROW_RANGE","ids","lastIdx","rowSize","rowCount","increment","query","fromCharCode","loadCells","nullCount","slice","toastProp","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","headers","Scan","toLocaleDateString","todayDate","setTodayDate","currentTimeSec","setCurrentTimeSec","findStudentRow","ID","getCurrentTime","toLocaleTimeString","hour12","hour","minute","getTime","parseInt","Recent","map","checkDuplicate","useServiceAccountAuth","config","loadInfo","tD","found","option","sheetsByTitle","toast","warning","text","reloadPage","error","noSheet","title","success","loaded","initialize","checkId","studentRowNumber","studentNumber","currentTime","idx","action","warn","alreadyDone","saveUpdatedCells","interval","timeSec","second","src","Logo","alt","ret","ToPrint","React","forwardRef","className","children","dateDiffInDays","a","b","utc1","UTC","getFullYear","getMonth","getDate","utc2","abs","floor","selectedIds","Set","Print","todayRows","setTodayRows","QRValue","setQRValue","inputText","setInputText","useDebounce","searchQuery","searchResults","setSearchResults","selectedCodes","setSelectedCodes","printRef","handlePrint","useReactToPrint","content","findMostRecentSheetDate","sheetDate","today","sheetDateString","setDate","results","row","toLowerCase","has","resultString","resultObject","add","failedToOpen","ts","getRows","rows","succeededToOpen","findStudents","includes","sr","placeholder","onChange","event","target","onClick","size","c","delete","App","path","element","newestOnTop","rtl","pauseOnFocusLoss","transition","Zoom","icon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.128e78f4.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport jsQR from \"jsqr\";\nimport \"../App.css\";\n\nconst PAUSE_COUNT = 5;\nlet delayCount = 0;\nfunction Reader(props) {\n    const video = useRef();\n    const canvasRef = useRef();\n    const [result, setResult] = useState();\n    const [black, setBlack] = useState(false);\n\n    function shutter() {\n        setBlack(true);\n        setTimeout(() => {\n            setBlack(false);\n        }, 300);\n    }\n\n    useEffect(\n        function () {\n            if (result) {\n                props.onScan(result.data);\n                setResult(null);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [result]\n    );\n\n    useEffect(function () {\n        const inter = setInterval(() => {\n            requestAnimationFrame(tick);\n        }, 200);\n        return () => {\n            clearInterval(inter);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(\n        function () {\n            navigator.mediaDevices\n                .getUserMedia({ video: { facingMode: \"environment\" } })\n                .then(function (stream) {\n                    console.log(stream);\n                    try {\n                        video.current.srcObject = stream;\n                        video.current.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\n                        video.current.play();\n                    } catch {}\n                });\n        },\n        [video, canvasRef]\n    );\n\n    function tick() {\n        if (props.periodic()) shutter();\n        if (--delayCount > 0) return;\n        if (video.current.readyState === video.current.HAVE_ENOUGH_DATA) {\n            canvasRef.current.height = video.current.videoHeight;\n            canvasRef.current.width = video.current.videoWidth;\n\n            var canvas = canvasRef.current.getContext(\"2d\");\n\n            canvas.drawImage(\n                video.current,\n                0,\n                0,\n                canvasRef.current.width,\n                canvasRef.current.height\n            );\n            var imageData = canvas.getImageData(\n                0,\n                0,\n                canvasRef.current.width,\n                canvasRef.current.height\n            );\n            var code = jsQR(imageData.data, imageData.width, imageData.height, {\n                inversionAttempts: \"dontInvert\",\n            });\n            if (code) {\n                console.log(code.data);\n                setResult({ data: code.data, time: new Date() });\n                delayCount = PAUSE_COUNT;\n            } \n            return;\n        } \n    }\n\n    return (\n        <div>\n            <video\n                style={{\n                    filter: black ? \"brightness(0%)\" : \"brightness(100%)\",\n                }}\n                ref={video}\n            ></video>\n            <canvas ref={canvasRef} hidden></canvas>\n        </div>\n    );\n}\n\nexport default Reader;\n","export default __webpack_public_path__ + \"static/media/Logo.f0526f33.png\";","export const spreadsheetID = {production: \"1FqeRNFlZZ7aJdtYRmjZ1kRb2-sarN9aoTMGyu4jhGKs\",\n                              development: \"12AWolV6lI99LM6NNP1bUwYanAuNDSWRJI8X4-ozM98Q\"};\n","import React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Reader from \"../components/Reader\";\r\n\r\nimport \"./Scan.css\";\r\nimport Logo from \"../images/Logo.png\";\r\nimport config from \"../api/config\";\r\nimport header from \"../api/header\";\r\nimport text from \"../api/text\";\r\nimport { spreadsheetID } from \"../api/spreadsheetID\";\r\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\r\n\r\nlet sheetKey;\r\nif (process.env.NODE_ENV === \"development\")\r\n{\r\n    console.log(\"Development mode\");\r\n    sheetKey = \"development\";\r\n}\r\nelse\r\n{\r\n    console.log(\"Production mode\");\r\n    sheetKey = \"production\";\r\n}\r\n\r\nconst doc = new GoogleSpreadsheet(spreadsheetID[sheetKey]);\r\n\r\nconst MAX_COLUMN = 26;\r\nconst ASCII_A = 65;\r\nconst dateFormatOptions = [\r\n    { year: \"numeric\", month: \"numeric\", day: \"numeric\" },\r\n    { year: \"2-digit\", month: \"numeric\", day: \"numeric\" },\r\n    { year: \"numeric\", month: \"2-digit\", day: \"numeric\" },\r\n    { year: \"2-digit\", month: \"2-digit\", day: \"numeric\" },\r\n    { year: \"numeric\", month: \"numeric\", day: \"2-digit\" },\r\n    { year: \"2-digit\", month: \"numeric\", day: \"2-digit\" },\r\n    { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" },\r\n    { year: \"2-digit\", month: \"2-digit\", day: \"2-digit\" },\r\n];\r\nconst SCAN_INTERVAL = 1000;\r\nconst CHECK_INTERVAL = 5000;\r\nconst scanList = [];\r\nconst scanHistory = [];\r\nconst recentList = [];\r\nlet idList = [];\r\nlet columnIndex = {};\r\nlet todaySheet;\r\nlet shutter = false;\r\n\r\n// eslint-disable-next-line no-extend-native\r\nString.prototype.format = function() {\r\n    var formatted = this;\r\n    for (var i = 0; i < arguments.length; i++) {\r\n        var regexp = new RegExp('\\\\{'+i+'\\\\}', 'gi');\r\n        formatted = formatted.replace(regexp, arguments[i]);\r\n    }\r\n    return formatted;\r\n}\r\n\r\nlet recentCount = 0;\r\nfunction addToRecentList(value) {\r\n    recentList.push([recentCount, ...value]);\r\n    if (recentList.length > 5) recentList.shift();\r\n    recentCount += 1;\r\n}\r\n\r\nfunction createHeader(tS)\r\n{\r\n    let idIdx = null;\r\n    let nameIdx = null;\r\n    let classIdx = null;\r\n    let checkInIdx = null;\r\n    let checkOutIdx = null;\r\n    for (let i = 0 ; i < Math.min(MAX_COLUMN, tS.columnCount) ; i++)\r\n    {\r\n        const entry = tS.getCell(0, i);\r\n        if (entry.valueType == null) continue;\r\n        nameIdx = (findHeader(entry.value, header.name)) ? i : nameIdx;\r\n        idIdx = (findHeader(entry.value, header.id)) ? i : idIdx;\r\n        classIdx = (findHeader(entry.value, header.class)) ? i : classIdx;\r\n        checkInIdx = (findHeader(entry.value, header.checkIn)) ? i : checkInIdx;\r\n        checkOutIdx = (findHeader(entry.value, header.checkOut)) ? i : checkOutIdx;\r\n    }\r\n    return {id:idIdx, name:nameIdx, class:classIdx, checkIn:checkInIdx, checkOut:checkOutIdx};\r\n}\r\n\r\n\r\nasync function createIds(idIdx, tS)\r\n{\r\n    let rowIdx = 0;\r\n    const ROW_RANGE = 50;\r\n    let ids = [];\r\n    let lastIdx = null;\r\n    const rowSize = tS.rowCount;\r\n    while (rowIdx < rowSize-1)\r\n    {\r\n        // Read ROW_RANGE cell\r\n        const increment = Math.min(rowSize - rowIdx, ROW_RANGE);\r\n        const query = String.fromCharCode(ASCII_A+idIdx) + (rowIdx+1) + \":\" +\r\n                      String.fromCharCode(ASCII_A+idIdx) + (rowIdx+increment);\r\n        await tS.loadCells(query);\r\n        console.log(query);\r\n\r\n        let nullCount = 0;\r\n        for (let i = 0 ; i < ROW_RANGE ; i++)\r\n        {\r\n            const entry = tS.getCell(rowIdx + i, idIdx);\r\n            let id = null;\r\n            if (entry.valueType == null)\r\n            {\r\n                nullCount++;\r\n            }\r\n            else\r\n            {\r\n                id = entry.value;\r\n                lastIdx = rowIdx + i;\r\n            }\r\n            ids.push(id);\r\n        }\r\n        // If all ROW_RANGE cells are empty, stop reading\r\n        if (nullCount === ROW_RANGE) break;\r\n        rowIdx += increment;\r\n    }\r\n    ids = ids.slice(0, lastIdx+1);\r\n\r\n    return ids;\r\n}\r\n\r\nconst toastProp = {\r\n    position: \"bottom-center\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined\r\n}\r\n\r\nfunction findHeader(value, headers)\r\n{\r\n    for (let h of headers)\r\n        if (h === value) return true ;\r\n\r\n    return false;\r\n}\r\n\r\nfunction Scan(props) {\r\n    const [todayDate, setTodayDate] = useState(new Date().toLocaleDateString());\r\n    const [currentTimeSec, setCurrentTimeSec] = useState(\"\");\r\n\r\n    useEffect(function() {\r\n        console.log(\"Update today data \" + todayDate);\r\n    }, [todayDate]);\r\n\r\n    useEffect(function () {\r\n        async function initialize() {\r\n            console.log('try to read sheet');\r\n            await doc.useServiceAccountAuth(config);\r\n            await doc.loadInfo(); // loads document properties and worksheets\r\n            console.log('Done');\r\n\r\n            let tD = new Date();\r\n            let found = false;\r\n            for (let option of dateFormatOptions) {\r\n                if (doc.sheetsByTitle[tD.toLocaleDateString(\"en-US\", option)]) {\r\n                    found = true;\r\n                    tD = tD.toLocaleDateString(\"en-US\", option);\r\n                    break;\r\n                }\r\n            }\r\n            if (found === false)\r\n            {\r\n                toast.warning(\r\n                    text.reloadPage, toastProp);\r\n                toast.error(text.noSheet, toastProp);\r\n                return;\r\n            }\r\n            const tS = doc.sheetsByTitle[tD];\r\n            console.log(\"tS\");\r\n            console.log(tS.title);\r\n            todaySheet = tS;\r\n            setTodayDate(tD);\r\n\r\n            toast.success(text.loaded, toastProp);\r\n\r\n            // Find spreadsheet headers\r\n            await tS.loadCells('A1:Z1');\r\n            const header = createHeader(tS);\r\n            columnIndex = header;\r\n\r\n            // Find ID list\r\n            idList = await createIds(header.id, tS);\r\n        }\r\n        initialize();\r\n\r\n    }, []);\r\n\r\n    function findStudentRow(ID) {\r\n        console.log(\"finding student row \" + idList.length);\r\n        for (let i = 0 ; i < idList.length ; i++)\r\n        {\r\n            if (idList[i] != null && idList[i] === ID) return i + 1;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function getCurrentTime() {\r\n        return new Date().toLocaleTimeString(\"en-US\", {\r\n            hour12: true,\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n        });\r\n    }\r\n\r\n    async function handleScan(data) {\r\n        const tick = new Date().getTime();\r\n        console.log(\"reached function \" + tick + \" \" + data);\r\n        const id = parseInt(data);\r\n        if (id > 0) scanList.push({tick:tick, id:id});\r\n\r\n        return;\r\n    }\r\n\r\n    function checkShutter() {\r\n        const ret = shutter;\r\n        if (ret)\r\n            console.log(\"Shutter!\");\r\n        shutter = false;\r\n        return ret;\r\n    }\r\n\r\n    function Recent() {\r\n        const header = (<tr><th>Name</th><th>action</th><th>time</th></tr>);\r\n        return (<table><tbody>{header}\r\n            {recentList.map(entry => (\r\n                <tr key={entry[0]}>\r\n                    <td key=\"name\">{entry[1]}</td>\r\n                    <td key=\"action\">{entry[2]}</td>\r\n                    <td key=\"time\">{entry[3]}</td>\r\n                </tr>\r\n               ))\r\n            }\r\n        </tbody></table>)\r\n    }\r\n\r\n    function checkDuplicate(id) {\r\n        for (let h of scanHistory)\r\n        {\r\n            if (h.id === id) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Set QR code scan updater\r\n    useEffect(() => {\r\n        async function checkId(id)\r\n        {\r\n            console.log(\"handling scanning \" + id);\r\n\r\n            // Locate student in the spreadsheet today\r\n            let studentNumber = id;\r\n            let studentRowNumber = findStudentRow(studentNumber);\r\n            const currentTime = getCurrentTime();\r\n\r\n            if (studentRowNumber == null) {\r\n                // Student does not exist\r\n                toast.error(`❗ Student ID could not be found!`, toastProp);\r\n            } else {\r\n                // Student ID is found\r\n                console.log(\"Student ID: \" + studentNumber + \" Index:\" + studentRowNumber);\r\n                const query = String.fromCharCode(ASCII_A) + (studentRowNumber) + \":\" +\r\n                              String.fromCharCode(ASCII_A+MAX_COLUMN-1) + (studentRowNumber);\r\n                await todaySheet.loadCells(query);\r\n                const idx = studentRowNumber - 1;\r\n                const name = todaySheet.getCell(idx, columnIndex.name);\r\n                const checkIn = todaySheet.getCell(idx, columnIndex.checkIn);\r\n                const checkOut = todaySheet.getCell(idx, columnIndex.checkOut);\r\n\r\n                // Determine action to take\r\n                let action = null;\r\n                if (checkIn.valueType == null) {\r\n                    // Check student in\r\n                    checkIn.value = currentTime;\r\n                    action = \"Check In\";\r\n\r\n                    toast.success(text.checkIn.format(name.value, currentTime), toastProp);\r\n                } else if (checkOut.valueType == null) {\r\n                    // Check student out\r\n                    checkOut.value = currentTime;\r\n                    action = \"Check Out\";\r\n\r\n                    toast.success(text.checkOut.format(name.value, currentTime), toastProp);\r\n                } else {\r\n                    // Student check in and out are both filled\r\n                    toast.warn(\r\n                        text.alreadyDone.format(name.value), toastProp);\r\n                }\r\n                if (action != null)\r\n                {\r\n                    console.log(action + \" \" + currentTime);\r\n                    addToRecentList([name.value, action, currentTime]);\r\n                    await todaySheet.saveUpdatedCells();\r\n                    shutter = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        const interval = setInterval(async () => {\r\n            const tick = new Date().getTime();\r\n            let timeSec = new Date().toLocaleTimeString(\"en-US\", {\r\n                hour12: true,\r\n                hour: \"numeric\",\r\n                minute: \"numeric\",\r\n                second: \"numeric\"\r\n            });\r\n            setCurrentTimeSec(timeSec);\r\n            while (scanHistory.length > 0 && tick - scanHistory[0].tick > CHECK_INTERVAL)\r\n            {\r\n                scanHistory.shift();\r\n            }\r\n            while (scanList.length > 0)\r\n            {\r\n                let entry = scanList.shift();\r\n\r\n                if (tick - entry.tick > SCAN_INTERVAL || checkDuplicate(entry.id)) continue;\r\n                scanHistory.push(entry);\r\n                await checkId(entry.id);\r\n                break;\r\n            }\r\n            return () => clearInterval(interval);\r\n        }, 200)\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"scan\">\r\n            <div id=\"title\" >\r\n                <img id=\"logo\" src={Logo} alt=\"SVKS\"/>\r\n                <h1>\r\n                    SVKS Check In/Out\r\n                </h1>\r\n            </div>\r\n            <div id=\"clock\">\r\n            {todayDate} {currentTimeSec}\r\n            </div>\r\n            <div id=\"contents\">\r\n                <div id=\"reader\">\r\n                    <Reader\r\n                        onScan={handleScan}\r\n                        periodic={checkShutter}/>\r\n                </div>\r\n                <div id=\"recent\">\r\n                    <h2>\r\n                        Recent Check In/Out\r\n                    </h2>\r\n                    <Recent />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scan;\r\n","import React from \"react\";\nexport const ToPrint = React.forwardRef((props, ref) => {\n    return (\n        <div\n            className=\"toPrint\"\n            ref={ref}\n            style={{\n                width: \"max(calc(100vw - 30rem), 80%)\",\n                // position: \"absolute\",\n                // // top: \"-100%\",\n                // zIndex: \"-100\",\n            }}\n        >\n            {props.children}\n        </div>\n    );\n});\n\nexport default ToPrint;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"./Scan.css\"\nimport QRCode from \"react-qr-code\";\nimport { toast } from \"react-toastify\";\nimport config from \"../api/config\";\nimport { spreadsheetID } from \"../api/spreadsheetID\";\nimport Logo from \"../images/Logo.png\";\nimport { useDebounce } from \"use-debounce\";\nimport { useReactToPrint } from \"react-to-print\";\nimport { ToPrint } from \"../components/ToPrint\";\nimport text from \"../api/text\";\n\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\nlet sheetKey;\nif (process.env.NODE_ENV === \"development\")\n{\n    console.log(\"Development mode\");\n    sheetKey = \"development\";\n}\nelse\n{\n    console.log(\"Production mode\");\n    sheetKey = \"production\";\n}\nconst doc = new GoogleSpreadsheet(spreadsheetID[sheetKey]);\n\n\nconst toastProp = {\n    position: \"bottom-center\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n};\n\nconst _MS_PER_DAY = 1000 * 60 * 60 * 24;\nfunction dateDiffInDays(a, b) {\n    // https://stackoverflow.com/questions/3224834/get-difference-between-2-dates-in-javascript\n    // Discard the time and time-zone information.\n    const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n    const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n\n    return Math.abs(Math.floor((utc2 - utc1) / _MS_PER_DAY));\n}\n\nconst dateFormatOptions = [\n    { year: \"numeric\", month: \"numeric\", day: \"numeric\" },\n    { year: \"2-digit\", month: \"numeric\", day: \"numeric\" },\n    { year: \"numeric\", month: \"2-digit\", day: \"numeric\" },\n    { year: \"2-digit\", month: \"2-digit\", day: \"numeric\" },\n    { year: \"numeric\", month: \"numeric\", day: \"2-digit\" },\n    { year: \"2-digit\", month: \"numeric\", day: \"2-digit\" },\n    { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" },\n    { year: \"2-digit\", month: \"2-digit\", day: \"2-digit\" },\n];\n\nconst selectedIds = new Set();\n\nfunction Print(props) {\n    const [todayRows, setTodayRows] = useState({});\n    const [QRValue, setQRValue] = useState(\"\");\n    const [inputText, setInputText] = useState(\"\");\n    const [searchQuery] = useDebounce(inputText, 50);\n    const [searchResults, setSearchResults] = useState([]);\n    const [selectedCodes, setSelectedCodes] = useState([]);\n\n    const printRef = useRef();\n    const handlePrint = useReactToPrint({\n        content: () => printRef.current,\n    });\n\n    function findMostRecentSheetDate() {\n        let sheetDate = new Date();\n        let today = new Date();\n        let sheetDateString = null;\n        while (!sheetDateString) {\n            for (let option of dateFormatOptions) {\n                if (\n                    doc.sheetsByTitle[\n                        sheetDate.toLocaleDateString(\"en-US\", option)\n                    ]\n                ) {\n                    sheetDateString = sheetDate.toLocaleDateString(\n                        \"en-US\",\n                        option\n                    );\n                    break;\n                }\n            }\n            sheetDate.setDate(sheetDate.getDate() - 1);\n            if (dateDiffInDays(today, sheetDate) > 400) break;\n        }\n        return sheetDateString;\n    }\n\n    useEffect(function () {\n        async function initialize() {\n            await doc.useServiceAccountAuth(config);\n            await doc.loadInfo(); // loads document properties and worksheets\n\n            // find today sheet\n            let sheetDate = findMostRecentSheetDate();\n\n            if (!doc.sheetsByTitle[sheetDate]) {\n                toast.error(text.failedToOpen, toastProp);\n            } else {\n                let ts = doc.sheetsByTitle[sheetDate];\n                const rows = await ts.getRows();\n                setTodayRows(rows);\n\n                toast.success(text.succeededToOpen, toastProp);\n                console.log(\"Sheet read \" + rows.length);\n            }\n        }\n        initialize();\n    }, []);\n\n    useEffect(\n        () => {\n            async function findStudents(text) {\n                let results = [];\n\n                for (const row of todayRows) {\n                    if (results.length > 4) break;\n                    if (\n                        (row[\"ID\"] + \"\").includes(text) ||\n                        row[\"이름\"]?.includes(text)\n                    ) {\n                        let resultString = `${row[\"이름\"]}:  ${row[\"ID\"]}`;\n                        let resultObject = {\n                            text: resultString,\n                            name: row[\"이름\"],\n                            id: row[\"ID\"],\n                        };\n                        results.push(resultObject);\n                    }\n                }\n                return results;\n            }\n            async function query() {\n                if (searchQuery) {\n                    let sr = await findStudents(searchQuery);\n                    if (sr.length === 1) {\n                        setQRValue(sr[0]);\n                    }\n                    if (sr.length > 0) setSearchResults(sr);\n                } else {\n                    setQRValue({});\n                    setSearchResults([]);\n                }\n            }\n            query();\n        },\n        [searchQuery, todayRows]\n    );\n\n\n    async function addMarkedStudents() {\n        let results = [];\n\n        for (const row of todayRows) {\n            if (row[\"Print\"]?.toLowerCase() === \"x\" && !selectedIds.has(row[\"ID\"])) {\n                let resultString = `${row[\"이름\"]}:  ${row[\"ID\"]}`;\n                let resultObject = {\n                    text: resultString,\n                    name: row[\"이름\"],\n                    id: row[\"ID\"],\n                };\n                results.push(resultObject);\n                selectedIds.add(row[\"ID\"]);\n            }\n        }\n        setSelectedCodes([...selectedCodes, ...results]);\n    }\n\n    return (\n        <div id=\"print\">\n            <div id=\"title\">\n                <img id=\"logo\"\n                    src={Logo}\n                    alt=\"logo\"\n                ></img>\n                <h1>\n                    Print QR Codes\n                </h1>\n            </div>\n            <div id=\"printContents\" >\n                <input id=\"search\"\n                    placeholder={\"Search for student or enter a number...\"}\n                    value={inputText}\n                    onChange={(event) => {\n                        setInputText(event.target.value);\n                    }}\n                ></input>\n\n                {searchResults.map((result) => {\n                    return (\n                        <div key={result.id} id=\"searchResult\"\n                            onClick={function () {\n                                // setQRValue(result.id);\n                                // setInputText(result.name);\n                                // function () {\n\n                                if (!selectedIds.has(result.id)) {\n                                setSelectedCodes([...selectedCodes, result]);\n                                selectedIds.add(result.id);\n            }\n                                // console.log(QRValue);\n                                // }\n                            }}\n                        >\n                            <h4>\n                                {result.text}\n                            </h4>\n                            {QRValue.id && (\n                                <QRCode size={50} value={QRValue.id} />\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n            {selectedCodes.length > 0 && (\n                <>\n                    <div id=\"selected\">\n                        {selectedCodes.map((code) => (\n                            <div key={code.id} id=\"selectedItem\">\n                                <QRCode size={100} value={code.id} />\n                                <p id=\"qrName\"> {code.text} </p>\n                                <button id=\"deleteButton\"\n                                    onClick={function () {\n                                        setSelectedCodes(\n                                            selectedCodes.filter(\n                                                (c) => parseInt(c.id) !== parseInt(code.id)\n                                            )\n                                        );\n                                        selectedIds.delete(code.id);\n                                    }}\n                                > X </button>\n                            </div>\n                        ))}\n                    </div>\n                    <ToPrint ref={printRef}>\n                        <div id=\"qrList\">\n                            {selectedCodes.map((code) => (\n                                <div key={code.id} id=\"qrCode\" >\n                                    <QRCode size={160} value={code.id} />\n                                    <p id=\"qrName\" >\n                                        {code.text}\n                                    </p>\n                                </div>\n                            ))}\n                        </div>\n                    </ToPrint>\n                    <button id=\"printButton\" onClick={handlePrint}>\n                        Print codes.\n                    </button>\n                </>\n            )}\n            <button id=\"printButton\" onClick={addMarkedStudents}>\n                Print codes for marked students.\n            </button>\n        </div>\n    );\n}\n\nexport default Print;\n","import \"./App.css\";\nimport Scan from \"./pages/Scan\";\nimport Print from \"./pages/Print\";\nimport { ToastContainer } from \"react-toastify\";\nimport { Zoom } from \"react-toastify\";\nimport { HashRouter as Router, Routes, Route} from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                <Routes>\n                    <Route path=\"/\" element={<Scan />} />\n                    <Route path=\"print\" element={<Print />} />\n                </Routes>\n\n                <ToastContainer\n                    position=\"bottom-center\"\n                    autoClose={3000}\n                    hideProgressBar={false}\n                    newestOnTop\n                    closeOnClick\n                    rtl={false}\n                    draggable\n                    pauseOnHover\n                    pauseOnFocusLoss={false}\n                    transition={Zoom}\n                    icon={false}\n                />\n                <h2>\n                    v 1.8.1\n                </h2>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}