{"version":3,"sources":["components/Reader.js","Util.js","images/Logo.png","pages/Scan.js","components/ToPrint.js","pages/Print.js","pages/Manual.js","Doc.js","api/spreadsheetID.js","App.js","reportWebVitals.js","index.js"],"names":["delayCount","Reader","props","video","useRef","canvasRef","useState","result","setResult","black","setBlack","tick","periodic","setTimeout","current","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","canvas","getContext","drawImage","imageData","getImageData","code","jsQR","data","inversionAttempts","console","log","time","Date","useEffect","onScan","isMounted","inter","setInterval","requestAnimationFrame","clearInterval","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","setAttribute","play","style","filter","ref","hidden","CODE_PER_SCREEN","sleep","Promise","resolve","Math","ceil","String","prototype","format","formatted","this","i","arguments","length","regexp","RegExp","replace","toastProp","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","scanList","scanHistory","recentList","shutter","recentCount","addToRecentList","value","push","shift","Scan","toLocaleDateString","todayDate","setTodayDate","currentTimeSec","setCurrentTimeSec","getCurrentTime","toLocaleTimeString","hour12","hour","minute","getTime","id","parseInt","Recent","header","map","entry","checkDuplicate","toast","dismiss","doc","isOpen","tD","sheetsByDate","prop","type","TYPE","WARNING","warning","text","reloadPage","ERROR","error","noSheet","initNoti","getCachedList","has","toString","info","loading","tS","sheet","date","readList","title","SUCCESS","render","loaded","update","initialize","checkId","currentTime","getStudent","noStudent","idx","action","checkIn","valueType","success","name","checkOut","warn","alreadyDone","updateCell","interval","timeSec","second","src","Logo","alt","ret","ToPrint","React","forwardRef","className","children","Print","inputText","setInputText","studentList","setStudentList","printList","setPrintList","useDebounce","searchQuery","searchResults","setSearchResults","selectedCodes","setSelectedCodes","displayedCodes","setDisplayedCodes","showMarked","setShowMarked","showSearched","setShowSearched","pageNum","setPageNum","printRef","handlePrint","useReactToPrint","content","results","toLowerCase","resultString","resultObject","findMostRecentSheet","sheetInfo","failedToOpen","cachedData","print","idIdx","idList","nameIdx","nameList","list","min","printIdx","succeededToOpen","findStudents","row","includes","sr","query","startIdx","count","slice","placeholder","onChange","event","target","onClick","add","size","c","pages","page","printCodes","ids","Set","selectedIds","Manual","sheetKey","selectedId","selectIdImpl","selectId","showEntries","cIn","cOut","cInDisabled","cOutDisabled","formattedValue","disabled","spreadsheetID","production","development","GoogleSpreadsheet","require","ASCII_A","dateFormatOptions","year","month","day","dateDiffInDays","a","b","utc1","UTC","getFullYear","getMonth","getDate","utc2","abs","floor","findHeader","headers","Doc","state","initialized","cachedList","useServiceAccountAuth","config","loadInfo","Object","keys","arg","sheetsByTitle","option","str","found","dateStr","loadCells","createHeader","classIdx","checkInIdx","checkOutIdx","columnCount","getCell","class","rowIdx","ROW_RANGE","lastIdx","rowSize","rowCount","increment","fromCharCode","nullCount","todaySheet","studentNumber","findStudentRow","studentRowNumber","saveUpdatedCells","ID","sheetDate","today","setDate","App","process","APP_NAME","APP_VERSION","openDoc","to","path","element","newestOnTop","rtl","pauseOnFocusLoss","transition","Zoom","icon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc63633c.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport jsQR from \"jsqr\";\nimport \"../App.css\";\n\nconst PAUSE_COUNT = 5;\nlet delayCount = 0;\nfunction Reader(props) {\n    const video = useRef();\n    const canvasRef = useRef();\n    const [result, setResult] = useState();\n    const [black, setBlack] = useState(false);\n\n    function shutter() {\n        setBlack(true);\n        setTimeout(() => {\n            setBlack(false);\n        }, 300);\n    }\n\n    useEffect(\n        function () {\n            if (result) {\n                props.onScan(result.data);\n                setResult(null);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [result]\n    );\n\n    useEffect(function () {\n        let isMounted = true;\n        const inter = setInterval(() => {\n            if (!isMounted)\n            {\n                console.log(\"Unmounted reader call\");\n                return;\n            }\n            requestAnimationFrame(tick);\n        }, 200);\n        return () => {\n            console.log(\"Clear interval for reader\");\n            isMounted = false;\n            clearInterval(inter);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(\n        function () {\n            navigator.mediaDevices\n                .getUserMedia({ video: { facingMode: \"environment\" } })\n                .then(function (stream) {\n                    console.log(stream);\n                    try {\n                        video.current.srcObject = stream;\n                        video.current.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\n                        video.current.play();\n                    } catch {}\n                });\n        },\n        [video, canvasRef]\n    );\n\n    function tick() {\n        if (props.periodic()) shutter();\n        if (--delayCount > 0) return;\n        if (video && video.current && video.current.readyState === video.current.HAVE_ENOUGH_DATA) {\n            canvasRef.current.height = video.current.videoHeight;\n            canvasRef.current.width = video.current.videoWidth;\n\n            var canvas = canvasRef.current.getContext(\"2d\");\n\n            canvas.drawImage(\n                video.current,\n                0,\n                0,\n                canvasRef.current.width,\n                canvasRef.current.height\n            );\n            var imageData = canvas.getImageData(\n                0,\n                0,\n                canvasRef.current.width,\n                canvasRef.current.height\n            );\n            var code = jsQR(imageData.data, imageData.width, imageData.height, {\n                inversionAttempts: \"dontInvert\",\n            });\n            if (code) {\n                console.log(code.data);\n                setResult({ data: code.data, time: new Date() });\n                delayCount = PAUSE_COUNT;\n            }\n            return;\n        }\n    }\n\n    return (\n        <div>\n            <video\n                style={{\n                    filter: black ? \"brightness(0%)\" : \"brightness(100%)\",\n                }}\n                ref={video}\n            ></video>\n            <canvas ref={canvasRef} hidden></canvas>\n        </div>\n    );\n}\n\nexport default Reader;\n","export const CODE_PER_SCREEN = 24;\r\nexport const CODE_PER_PAGE = 12;\r\n\r\nexport const sleep = (time) => {\r\n   return new Promise((resolve) => setTimeout(resolve, Math.ceil(time * 1000)));\r\n};\r\n\r\ninterface String\r\n{\r\n    format: () => String;\r\n}\r\n\r\n// eslint-disable-next-line no-extend-native\r\nString.prototype.format = function() {\r\n    let formatted = this;\r\n    for (let i = 0; i < arguments.length; i++) {\r\n        let regexp = new RegExp('\\\\{'+i+'\\\\}', 'gi');\r\n        formatted = formatted.replace(regexp, arguments[i]);\r\n    }\r\n    return formatted;\r\n}\r\n\r\nexport const toastProp = {\r\n    position: \"top-center\",\r\n    autoClose: 3000,\r\n    hideProgressBar: true,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Logo.f0526f33.png\";","import React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Reader from \"../components/Reader\";\r\nimport { sleep, toastProp } from \"../Util\";\r\n\r\nimport \"./Scan.css\";\r\nimport Logo from \"../images/Logo.png\";\r\nimport text from \"../api/text\";\r\n\r\nconst SCAN_INTERVAL = 1000;\r\nconst CHECK_INTERVAL = 5000;\r\nconst scanList = [];\r\nconst scanHistory = [];\r\nconst recentList = [];\r\nlet shutter = false;\r\n\r\nlet recentCount = 0;\r\nfunction addToRecentList(value) {\r\n    recentList.push([recentCount, ...value]);\r\n    if (recentList.length > 5) recentList.shift();\r\n    recentCount += 1;\r\n}\r\n\r\nfunction Scan(props) {\r\n    const [todayDate, setTodayDate] = useState(new Date().toLocaleDateString());\r\n    const [currentTimeSec, setCurrentTimeSec] = useState(\"\");\r\n\r\n    useEffect(function() {\r\n        console.log(\"Update today date \" + todayDate);\r\n    }, [todayDate]);\r\n\r\n    useEffect(function () {\r\n        async function initialize() {\r\n            toast.dismiss();\r\n            console.log(\"Wait for sheet\");\r\n            while (!props.doc.isOpen()) {\r\n                console.log(\"check\");\r\n                await sleep(1.0);\r\n            }\r\n            console.log(\"done\");\r\n            let tD = new Date();\r\n            const result = await props.doc.sheetsByDate(tD);\r\n            if (!result)\r\n            {\r\n                const prop = toastProp;\r\n                prop.autoClose = 3000;\r\n                prop.type = toast.TYPE.WARNING;\r\n                toast.warning(\r\n                    text.reloadPage, toastProp);\r\n                prop.type = toast.TYPE.ERROR;\r\n                toast.error(text.noSheet, toastProp);\r\n                return;\r\n            }\r\n            let initNoti = null;\r\n            const cachedData = props.doc.getCachedList();\r\n            if (!cachedData.has(result.header.id.toString()))\r\n            {\r\n                const prop = toastProp;\r\n                prop.autoClose = false;\r\n                initNoti = toast.info(text.loading, toastProp);\r\n            }\r\n            const tS = result.sheet;\r\n            const date = result.date;\r\n            await props.doc.readList(result.header.id);\r\n            console.log(\"tS\");\r\n            console.log(tS.title);\r\n            setTodayDate(date);\r\n\r\n            if (initNoti)\r\n            {\r\n                const prop = toastProp;\r\n                prop.type = toast.TYPE.SUCCESS;\r\n                prop.autoClose = 3000;\r\n                prop.render = text.loaded;\r\n                toast.update(initNoti, prop);\r\n            }\r\n        }\r\n        initialize();\r\n\r\n    }, [props]);\r\n\r\n    function getCurrentTime() {\r\n        return new Date().toLocaleTimeString(\"en-US\", {\r\n            hour12: true,\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n        });\r\n    }\r\n\r\n    async function handleScan(data) {\r\n        const tick = new Date().getTime();\r\n        console.log(\"reached function \" + tick + \" \" + data);\r\n        const id = parseInt(data);\r\n        if (id > 0) scanList.push({tick:tick, id:id});\r\n\r\n        return;\r\n    }\r\n\r\n    function checkShutter() {\r\n        const ret = shutter;\r\n        shutter = false;\r\n        return ret;\r\n    }\r\n\r\n    function Recent() {\r\n        const header = (<tr><th id=\"name\">Name</th><th id=\"action\">action</th><th id=\"time\">time</th></tr>);\r\n        return (<table><tbody>{header}\r\n            {recentList.map(entry => (\r\n                <tr key={entry[0]}>\r\n                    <td key=\"name\" id=\"name\">{entry[1]}</td>\r\n                    <td key=\"action\" id=\"action\">{entry[2]}</td>\r\n                    <td key=\"time\" id=\"time\">{entry[3]}</td>\r\n                </tr>\r\n               ))\r\n            }\r\n        </tbody></table>)\r\n    }\r\n\r\n    function checkDuplicate(id) {\r\n        for (let h of scanHistory)\r\n        {\r\n            if (h.id === id) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Set QR code scan updater\r\n    useEffect(() => {\r\n        async function checkId(id)\r\n        {\r\n            console.log(\"handling scanning \" + id);\r\n\r\n            // Locate student in the spreadsheet today\r\n            const currentTime = getCurrentTime();\r\n\r\n            const info = await props.doc.getStudent(id);\r\n            if (!info)\r\n            {\r\n                // Student does not exist\r\n                toast.error(text.noStudent, toastProp);\r\n                return;\r\n            }\r\n            console.log(\"Student ID: \" + id + \" Idx:  \" + info.idx);\r\n            // Determine action to take\r\n            let action = null;\r\n            if (info.checkIn.valueType == null) {\r\n                // Check student in\r\n                info.checkIn.value = currentTime;\r\n                action = \"Check In\";\r\n\r\n                toast.success(text.checkIn.format(info.name.value, currentTime), toastProp);\r\n            } else if (info.checkOut.valueType == null) {\r\n                // Check student out\r\n                info.checkOut.value = currentTime;\r\n                action = \"Check Out\";\r\n\r\n                toast.success(text.checkOut.format(info.name.value, currentTime), toastProp);\r\n            } else {\r\n                // Student check in and out are both filled\r\n                toast.warn(\r\n                    text.alreadyDone.format(info.name.value), toastProp);\r\n                return;\r\n            }\r\n            console.log(action + \" \" + currentTime);\r\n            addToRecentList([info.name.value, action, currentTime]);\r\n            await props.doc.updateCell();\r\n            shutter = true;\r\n        }\r\n\r\n        const interval = setInterval(async () => {\r\n            const tick = new Date().getTime();\r\n            let timeSec = new Date().toLocaleTimeString(\"en-US\", {\r\n                hour12: true,\r\n                hour: \"numeric\",\r\n                minute: \"numeric\",\r\n                second: \"numeric\"\r\n            });\r\n            setCurrentTimeSec(timeSec);\r\n            while (scanHistory.length > 0 && tick - scanHistory[0].tick > CHECK_INTERVAL)\r\n            {\r\n                scanHistory.shift();\r\n            }\r\n            while (scanList.length > 0)\r\n            {\r\n                let entry = scanList.shift();\r\n\r\n                if (tick - entry.tick > SCAN_INTERVAL || checkDuplicate(entry.id)) continue;\r\n                scanHistory.push(entry);\r\n                await checkId(entry.id);\r\n                break;\r\n            }\r\n            return () => clearInterval(interval);\r\n        }, 200)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"scan\">\r\n            <div id=\"title\" >\r\n                <img id=\"logo\" src={Logo} alt=\"SVKS\"/>\r\n                <h1> SVKS Check In/Out </h1>\r\n            </div>\r\n            <div id=\"clock\">\r\n            {todayDate} {currentTimeSec}\r\n            </div>\r\n            <div id=\"contents\">\r\n                <div id=\"reader\">\r\n                    <Reader\r\n                        onScan={handleScan}\r\n                        periodic={checkShutter}/>\r\n                </div>\r\n                <div id=\"recent\">\r\n                    <h2>\r\n                        Recent Check In/Out\r\n                    </h2>\r\n                    <Recent />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scan;\r\n","import React from \"react\";\r\nexport const ToPrint = React.forwardRef((props, ref) => {\r\n    return (\r\n        <div\r\n            className=\"toPrint\"\r\n            ref={ref}\r\n            style={{\r\n                width: \"auto\",\r\n                // position: \"absolute\",\r\n                // // top: \"-100%\",\r\n                // zIndex: \"-100\",\r\n            }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ToPrint;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./Scan.css\"\r\nimport QRCode from \"react-qr-code\";\r\nimport { toast } from \"react-toastify\";\r\nimport Logo from \"../images/Logo.png\";\r\nimport { useDebounce } from \"use-debounce\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { ToPrint } from \"../components/ToPrint\";\r\nimport { sleep, toastProp, CODE_PER_PAGE, CODE_PER_SCREEN } from \"../Util\";\r\nimport text from \"../api/text\";\r\n\r\nfunction Print(props) {\r\n    const [inputText, setInputText] = useState(\"\");\r\n    const [studentList, setStudentList] = useState([]);\r\n    const [printList, setPrintList] = useState([]);\r\n    const [searchQuery] = useDebounce(inputText, 50);\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [selectedCodes, setSelectedCodes] = useState([]);\r\n    const [displayedCodes, setDisplayedCodes] = useState([]);\r\n    const [showMarked, setShowMarked] = useState(false);\r\n    const [showSearched, setShowSearched] = useState(false);\r\n    const [pageNum, setPageNum] = useState(0);\r\n\r\n    const printRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => printRef.current,\r\n    });\r\n\r\n    useEffect(function () {\r\n        async function initialize() {\r\n            toast.dismiss();\r\n            while (!props.doc.isOpen()) {\r\n                await sleep(0.1);\r\n            }\r\n\r\n            let sheetInfo = await props.doc.findMostRecentSheet();\r\n\r\n            if (!sheetInfo)\r\n            {\r\n                const prop = toastProp;\r\n                prop.autoClose = 3000;\r\n                toast.error(text.failedToOpen, prop);\r\n                return;\r\n            }\r\n            const cachedData = props.doc.getCachedList();\r\n            let initNoti = null;\r\n            if (!cachedData.has(sheetInfo.header.id.toString()) ||\r\n                !cachedData.has(sheetInfo.header.name.toString()) ||\r\n                (sheetInfo.header.print &&\r\n                 !(sheetInfo.header.print in cachedData) ))\r\n            {\r\n                console.log(\"Data should be loaded\");\r\n                const prop = toastProp;\r\n                prop.autoClose = false;\r\n                initNoti = toast.info(text.loading, prop);\r\n            }\r\n\r\n            console.log(sheetInfo.date);\r\n            const idIdx = sheetInfo.header.id;\r\n            const idList = await props.doc.readList(idIdx);\r\n            const nameIdx = sheetInfo.header.name;\r\n            const nameList = await props.doc.readList(nameIdx);\r\n            const list = [];\r\n            for (let i = 0 ; i < Math.min(idList.length, nameList.length); i++)\r\n            {\r\n               list.push({id: idList[i],  name: nameList[i]});\r\n            }\r\n            setStudentList(list);\r\n\r\n            const printIdx = sheetInfo.header.print;\r\n            if (printIdx)\r\n            {\r\n                setPrintList(await props.doc.readList(printIdx));\r\n            }\r\n\r\n            console.log(\"Sheet read \" + list.length);\r\n            if (initNoti) {\r\n                const prop = toastProp;\r\n                prop.type = toast.TYPE.SUCCESS;\r\n                prop.render = text.succeededToOpen;\r\n                prop.autoClose = 3000;\r\n                toast.update(initNoti, prop);\r\n            }\r\n        }\r\n        initialize();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(\r\n        () => {\r\n            async function findStudents(text) {\r\n                let results = [];\r\n\r\n                for (const row of studentList) {\r\n                    if (results.length > 4) break;\r\n                    if ((row.id && row.id.toString().includes(text)) ||\r\n                        (row.name && row.name.toString().includes(text)))\r\n                    {\r\n                        let resultString = `${row.name}:  ${row.id}`;\r\n                        let resultObject = {\r\n                            text: resultString,\r\n                            name: row.name,\r\n                            id: row.id.toString(),\r\n                        };\r\n                        results.push(resultObject);\r\n                    }\r\n                }\r\n                return results;\r\n            }\r\n            async function query() {\r\n                if (searchQuery) {\r\n                    let sr = await findStudents(searchQuery);\r\n                    if (sr.length > 0) setSearchResults(sr);\r\n                } else {\r\n                    setSearchResults([]);\r\n                }\r\n            }\r\n            query();\r\n        },\r\n        [searchQuery, studentList]\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            setShowMarked(printList.length > 0);\r\n        }, [printList]\r\n    );\r\n    useEffect(\r\n        () => {\r\n            setShowSearched(searchResults.length > 0)\r\n        }, [searchResults]\r\n    );\r\n    useEffect(\r\n        () => {\r\n            const length = selectedCodes.length;\r\n            if (length > CODE_PER_SCREEN)\r\n            {\r\n                const startIdx = pageNum * CODE_PER_SCREEN;\r\n                const count = Math.min(CODE_PER_SCREEN, length - startIdx);\r\n                setDisplayedCodes(selectedCodes.slice(startIdx,startIdx+count));\r\n            }\r\n            else\r\n            {\r\n                setDisplayedCodes(selectedCodes);\r\n                setPageNum(0);\r\n            }\r\n        }, [selectedCodes, pageNum]\r\n    );\r\n\r\n    async function addMarkedStudents() {\r\n        let results = [];\r\n\r\n        for (let i = 0 ; i < printList.length ; i++)\r\n        {\r\n            if (printList[i] && printList[i].toLowerCase() === \"x\" && studentList[i].id != null)\r\n            {\r\n                const entry = studentList[i];\r\n                let resultString = `${entry.name}:  ${entry.id}`;\r\n                let resultObject = {\r\n                    text: resultString,\r\n                    name: entry.name,\r\n                    id: entry.id.toString()\r\n                };\r\n                results.push(resultObject);\r\n            }\r\n        }\r\n        setSelectedCodes([...selectedCodes, ...results]);\r\n    }\r\n\r\n    function addSelected() {\r\n        let results = [];\r\n        for (let i = 0 ; i < searchResults.length ; i++)\r\n        {\r\n            let result = searchResults[i];\r\n            let add = true;\r\n            selectedCodes.map((code) => {\r\n                if (code.id === result.id)\r\n                {\r\n                    add = false;\r\n                }\r\n                return \"\"\r\n            });\r\n            if (add)\r\n            {\r\n                results.push(result);\r\n            }\r\n        }\r\n        setSelectedCodes([...selectedCodes, ...results]);\r\n    }\r\n\r\n    function addAll() {\r\n        let results = [];\r\n        setSelectedCodes([]);\r\n        let ids = new Set();\r\n        for (const row of studentList) {\r\n            if (row.id == null || row.id.length === 0 || row.name == null || ids.has(row.id))\r\n            {\r\n                continue;\r\n            }\r\n            console.log(row)\r\n            let resultString = `${row.name}:  ${row.id}`;\r\n            let resultObject = {\r\n                text: resultString,\r\n                name: row.name,\r\n                id: row.id.toString(),\r\n            };\r\n            results.push(resultObject);\r\n            ids.add(row.id);\r\n        }\r\n        setSelectedCodes(results);\r\n    }\r\n\r\n    function removeAll() {\r\n        setSelectedCodes([]);\r\n    }\r\n\r\n    function movePrev() {\r\n        if (pageNum > 0)\r\n        {\r\n            setPageNum(pageNum - 1);\r\n        }\r\n    }\r\n\r\n    function moveNext() {\r\n        if (selectedCodes.length > (pageNum + 1) * CODE_PER_SCREEN)\r\n        {\r\n            setPageNum(pageNum + 1);\r\n        }\r\n    }\r\n\r\n    function printCodes() {\r\n        let pages = [];\r\n        for (let i = 0 ; i < selectedCodes.length ; i += CODE_PER_PAGE)\r\n        {\r\n            const count = Math.min(CODE_PER_PAGE, selectedCodes.length - i);\r\n            pages.push(selectedCodes.slice(i, i + count));\r\n        }\r\n        return pages.map((page) => (\r\n                    <div id=\"qrList\">\r\n                        {page.map((code) => (\r\n                            <div key={code.id} id=\"qrCode\" >\r\n                                <QRCode size={160} value={code.id} />\r\n                                <p id=\"qrName\" >\r\n                                    {code.text}\r\n                                </p>\r\n                            </div>\r\n                         ))}\r\n                    </div>\r\n               ));\r\n    }\r\n\r\n    return (\r\n        <div id=\"print\">\r\n            <div id=\"title\">\r\n                <img id=\"logo\" src={Logo} alt=\"SVKS\" ></img>\r\n                <h1> Print QR Codes </h1>\r\n            </div>\r\n            <div id=\"printContents\" >\r\n                <input id=\"search\"\r\n                    placeholder={\"Search for student or enter a number...\"}\r\n                    value={inputText}\r\n                    onChange={(event) => {\r\n                        setInputText(event.target.value);\r\n                    }} />\r\n\r\n                {searchResults.map((result) => {\r\n                    return (\r\n                        <div key={result.id} id=\"searchResult\"\r\n                            onClick={function () {\r\n                                let add = true;\r\n                                selectedCodes.map((code) => {\r\n                                    if (code.id === result.id)\r\n                                    {\r\n                                        add = false;\r\n                                    }\r\n                                    return \"\"\r\n                                });\r\n                                if (add)\r\n                                {\r\n                                    setSelectedCodes([...selectedCodes, result]);\r\n                                }\r\n                            }}>\r\n                            <h4> {result.text} </h4>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            {displayedCodes.length > 0 && (\r\n                <>\r\n                    <div id=\"selected\">\r\n                        {displayedCodes.map((code) => (\r\n                            <div key={code.id} id=\"selectedItem\">\r\n                                <QRCode size={100} value={code.id} />\r\n                                <p id=\"qrName\"> {code.text} </p>\r\n                                <button id=\"deleteButton\"\r\n                                    onClick={function () {\r\n                                        setSelectedCodes(\r\n                                            selectedCodes.filter(\r\n                                                (c) => parseInt(c.id) !== parseInt(code.id)\r\n                                            )\r\n                                        );\r\n                                    }}\r\n                                > X </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <ToPrint ref={printRef}>\r\n                        {printCodes()}\r\n                    </ToPrint>\r\n                </>\r\n            )}\r\n            {selectedCodes.length > CODE_PER_SCREEN && (\r\n                <div id=\"pageControl\" hidden={selectedCodes.length <= CODE_PER_SCREEN}>\r\n                    <button id=\"prevPage\" onClick={movePrev}> &lt;&lt; </button>\r\n                    <p id=\"pageNum\"> {pageNum+1} </p>\r\n                    <button id=\"nextPage\" onClick={moveNext}> &gt;&gt; </button>\r\n                </div>\r\n            )}\r\n            <button id=\"printButton\" hidden={displayedCodes.length === 0} onClick={handlePrint}>\r\n                Print codes\r\n            </button>\r\n            <button id=\"selectSearched\" hidden={!showSearched} onClick={addSelected}>\r\n                Select all search results\r\n            </button>\r\n            <button id=\"selectAll\" onClick={addAll}>\r\n                Select all\r\n            </button>\r\n            <button id=\"selectMarked\" hidden={!showMarked} onClick={addMarkedStudents}>\r\n                Print codes for marked students.\r\n            </button>\r\n            <button id=\"removeAll\" hidden={(!selectedCodes.length > 0)} onClick={removeAll}>\r\n                Remove all\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Print;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Scan.css\"\r\nimport { toast } from \"react-toastify\";\r\nimport Logo from \"../images/Logo.png\";\r\nimport { useDebounce } from \"use-debounce\";\r\nimport { sleep, toastProp } from \"../Util\";\r\nimport text from \"../api/text\";\r\n\r\nconst selectedIds = new Set();\r\n\r\nfunction getCurrentTime() {\r\n    return new Date().toLocaleTimeString(\"en-US\", {\r\n        hour12: true,\r\n        hour: \"numeric\",\r\n        minute: \"numeric\",\r\n    });\r\n}\r\n\r\nfunction Manual(props) {\r\n    const [inputText, setInputText] = useState(\"\");\r\n    const [studentList, setStudentList] = useState([]);\r\n    const [searchQuery] = useDebounce(inputText, 50);\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [selectedId, selectIdImpl] = useState({id:-1});\r\n    const [todayDate, setTodayDate] = useState(new Date().toLocaleDateString());\r\n    const [currentTimeSec, setCurrentTimeSec] = useState(\"\");\r\n\r\n    useEffect(function () {\r\n        async function initialize() {\r\n            toast.dismiss();\r\n            while (!props.doc.isOpen()) {\r\n                await sleep(0.1);\r\n            }\r\n\r\n            let tD = new Date();\r\n            const sheetInfo = await props.doc.sheetsByDate(tD);\r\n\r\n            if (!sheetInfo)\r\n            {\r\n                const prop = toastProp;\r\n                prop.autoClose = 3000;\r\n                toast.error(text.failedToOpen, prop);\r\n                return;\r\n            }\r\n            const cachedData = props.doc.getCachedList();\r\n            let initNoti = null;\r\n            if (!cachedData.has(sheetInfo.header.id.toString()) ||\r\n                !cachedData.has(sheetInfo.header.name.toString()) )\r\n            {\r\n                console.log(\"Data should be loaded\");\r\n                const prop = toastProp;\r\n                prop.autoClose = false;\r\n                initNoti = toast.info(text.loading, prop);\r\n            }\r\n\r\n\r\n            console.log(sheetInfo.date);\r\n            const idIdx = sheetInfo.header.id;\r\n            const idList = await props.doc.readList(idIdx);\r\n            const nameIdx = sheetInfo.header.name;\r\n            const nameList = await props.doc.readList(nameIdx);\r\n            const list = [];\r\n            for (let i = 0 ; i < Math.min(idList.length, nameList.length); i++)\r\n            {\r\n               list.push({id: idList[i],  name: nameList[i]});\r\n            }\r\n            setStudentList(list);\r\n\r\n            console.log(\"Sheet read \" + list.length);\r\n            if (initNoti) {\r\n                const prop = toastProp;\r\n                prop.type = toast.TYPE.SUCCESS;\r\n                prop.autoClose = 3000;\r\n                prop.render = text.succeededToOpen;\r\n                toast.update(initNoti, prop);\r\n            }\r\n            setTodayDate(sheetInfo.date);\r\n        }\r\n        initialize();\r\n        return () => toast.dismiss();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(\r\n        () => {\r\n            async function findStudents(text) {\r\n                let results = [];\r\n\r\n                for (const row of studentList) {\r\n                    if (results.length > 4) break;\r\n                    if ((row.id && row.id.toString().includes(text)) ||\r\n                        (row.name && row.name.toString().includes(text)))\r\n                    {\r\n                        let resultString = `${row.id}: ${row.name}`;\r\n                        let resultObject = {\r\n                            id: row.id,\r\n                            name: row.name,\r\n                            text: resultString,\r\n                        };\r\n                        results.push(resultObject);\r\n                        selectedIds.add(row.id);\r\n                    }\r\n                }\r\n                return results;\r\n            }\r\n            async function query() {\r\n                if (searchQuery) {\r\n                    let sr = await findStudents(searchQuery);\r\n                    if (sr.length > 0)\r\n                    {\r\n                        setSearchResults(sr);\r\n                    }\r\n                    else\r\n                    {\r\n                        console.log(\"No matching student\");\r\n                        setSearchResults([]);\r\n                    }\r\n                } else {\r\n                    console.log(\"No matching student\");\r\n                    setSearchResults([]);\r\n                }\r\n            }\r\n            query();\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [searchQuery, studentList]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(async () => {\r\n            let timeSec = new Date().toLocaleTimeString(\"en-US\", {\r\n                hour12: true,\r\n                hour: \"numeric\",\r\n                minute: \"numeric\",\r\n                second: \"numeric\"\r\n            });\r\n            setCurrentTimeSec(timeSec);\r\n            return () => clearInterval(interval);\r\n        }, 200)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const checkIn = (id) => {\r\n        console.log('Check in ' + id);\r\n        const currentTime = getCurrentTime();\r\n        selectedId.checkIn.value = currentTime;\r\n        props.doc.updateCell();\r\n        toast.success(text.checkIn.format(selectedId.name.value, currentTime), toastProp);\r\n    }\r\n\r\n    const checkOut = (id) => {\r\n        console.log('Check out ' + id);\r\n        const currentTime = getCurrentTime();\r\n        selectedId.checkOut.value = currentTime;\r\n        props.doc.updateCell();\r\n        toast.success(text.checkOut.format(selectedId.name.value, currentTime), toastProp);\r\n    }\r\n\r\n    const selectId = async (id) => {\r\n        const info = await props.doc.getStudent(id);\r\n        console.log(\"Select \" + selectedId.id + \" \" + id);\r\n        console.log(selectedId);\r\n        if (!selectedId || !selectedId.id || selectedId.id !== id)\r\n        {\r\n            console.log(\"Selected\");\r\n            console.log(info);\r\n            selectIdImpl({...info, id:id});\r\n        }\r\n        else\r\n        {\r\n            console.log(\"Deselect\");\r\n            selectIdImpl({id:-1});\r\n        }\r\n    }\r\n\r\n    const showEntries = (result) => {\r\n        let cIn, cOut;\r\n        let cInDisabled;\r\n        let cOutDisabled;\r\n        cInDisabled = cOutDisabled = false;\r\n        cIn = \"Check In\";\r\n        cOut = \"Check Out\";\r\n        const hidden = (selectedId.id !== result.id);\r\n        if (!hidden)\r\n        {\r\n            if (selectedId.checkIn.valueType)\r\n            {\r\n                cIn = \"Check In: \" + selectedId.checkIn.formattedValue;\r\n                cInDisabled = true;\r\n            }\r\n            if (selectedId.checkOut.valueType)\r\n            {\r\n                cOut = \"Check Out: \" + selectedId.checkOut.formattedValue;\r\n                cOutDisabled = true;\r\n            }\r\n        }\r\n        return (<div key={result.id}><button type=\"button\" id=\"searchResult\" onClick={async () => {await selectId(result.id);}}> {result.text} </button>\r\n                    <div hidden={hidden}>\r\n                        <button type=\"button\" id=\"checkInOut\" disabled={cInDisabled} onClick={() => {checkIn(result.id)}}> {cIn} </button>\r\n                        <button type=\"button\" id=\"checkInOut\" disabled={cOutDisabled} onClick={() => {checkOut(result.id)}}> {cOut} </button>\r\n                    </div>\r\n                </div>);\r\n    }\r\n\r\n    return (\r\n        <div id=\"manual\">\r\n            <div id=\"title\">\r\n                <img id=\"logo\" src={Logo} alt=\"SVKS\" ></img>\r\n                <h1> Manual Check In/Out </h1>\r\n            </div>\r\n            <div id=\"clock\">\r\n            {todayDate} {currentTimeSec}\r\n            </div>\r\n            <div id=\"manualInput\" >\r\n                <input id=\"search\"\r\n                    placeholder={\"Search for student or enter a number...\"}\r\n                    value={inputText}\r\n                    onChange={(event) => {\r\n                        setInputText(event.target.value);\r\n                    }} />\r\n\r\n                {\r\n                    searchResults.map((result) => {\r\n                        return showEntries(result);\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Manual;\r\n","import { spreadsheetID } from \"./api/spreadsheetID\";\nimport config from \"./api/config\";\nimport header from \"./api/header\";\n\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\n\nconst MAX_COLUMN = 26;\nconst ASCII_A = 65;\n\nlet sheetKey;\nif (process.env.NODE_ENV === \"development\")\n{\n    console.log(\"Development mode\");\n    sheetKey = \"development\";\n}\nelse\n{\n    console.log(\"Production mode\");\n    sheetKey = \"production\";\n}\n\nconst dateFormatOptions = [\n    { year: \"numeric\", month: \"numeric\", day: \"numeric\" },\n    { year: \"2-digit\", month: \"numeric\", day: \"numeric\" },\n    { year: \"numeric\", month: \"2-digit\", day: \"numeric\" },\n    { year: \"2-digit\", month: \"2-digit\", day: \"numeric\" },\n    { year: \"numeric\", month: \"numeric\", day: \"2-digit\" },\n    { year: \"2-digit\", month: \"numeric\", day: \"2-digit\" },\n    { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" },\n    { year: \"2-digit\", month: \"2-digit\", day: \"2-digit\" },\n];\n\nconst _MS_PER_DAY = 1000 * 60 * 60 * 24;\nfunction dateDiffInDays(a, b) {\n    // https://stackoverflow.com/questions/3224834/get-difference-between-2-dates-in-javascript\n    // Discard the time and time-zone information.\n    const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n    const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n\n    return Math.abs(Math.floor((utc2 - utc1) / _MS_PER_DAY));\n}\n\n\nfunction findHeader(value, headers)\n{\n    for (let h of headers)\n        if (h === value) return true ;\n\n    return false;\n}\n\nclass Doc {\n    constructor() {\n        console.log(\"Create Doc class\");\n        const doc = new GoogleSpreadsheet(spreadsheetID[sheetKey]);\n        const sheetInfo = {sheet: null, date: null, header: null, cachedList: {}};\n        this.state = {doc: doc, initialized: false, sheetInfo: sheetInfo};\n    }\n\n    async openDoc() {\n        console.log('try to read sheet');\n        await this.state.doc.useServiceAccountAuth(config);\n        console.log('Auth Done');\n        await this.state.doc.loadInfo(); // loads document properties and worksheets\n        console.log('Done');\n        this.state.initialized = true;\n    }\n\n    isOpen() {\n        return this.state.initialized;\n    }\n\n    getCachedList() {\n        return new Set(Object.keys(this.state.sheetInfo.cachedList));\n    }\n\n    async sheetsByTitle(arg) {\n        this.state.sheetInfo.sheet = await this.state.doc.sheetsByTitle[arg];\n        this.state.sheetInfo.date = arg;\n\n        return this.state.sheetInfo;\n    }\n\n    async sheetsByDate(date) {\n        for (let option of dateFormatOptions) {\n            const str = date.toLocaleDateString(\"en-US\", option);\n            if (this.state.sheetInfo.date && str === this.state.sheetInfo.date)\n            {\n                console.log(\"Found \" + str);\n                console.log(this.state.sheetInfo);\n                return this.state.sheetInfo;\n            }\n        }\n        let found = false;\n        for (let option of dateFormatOptions) {\n            const dateStr = date.toLocaleDateString(\"en-US\", option);\n            const sheet = await this.state.doc.sheetsByTitle[dateStr];\n            if (sheet) {\n                this.state.sheetInfo.date = dateStr;\n                this.state.sheetInfo.sheet = sheet;\n                found = true;\n                break;\n            }\n        }\n        if (!found)\n            return null;\n\n        console.log(\"Found sheet \" + this.state.sheetInfo.sheet);\n\n        // Find spreadsheet headers\n        await this.state.sheetInfo.sheet.loadCells('A1:Z1');\n        const header = this.createHeader(this.state.sheetInfo.sheet);\n        console.log(header);\n\n        this.state.sheetInfo.header = header;\n\n        return this.state.sheetInfo;\n    }\n\n    createHeader(tS = this.state.sheetInfo.sheet)\n    {\n        let idIdx = null;\n        let nameIdx = null;\n        let classIdx = null;\n        let checkInIdx = null;\n        let checkOutIdx = null;\n        let printIdx = null;\n        if (!tS)\n            return {};\n        for (let i = 0 ; i < Math.min(MAX_COLUMN, tS.columnCount) ; i++)\n        {\n            const entry = tS.getCell(0, i);\n            if (entry.valueType == null) continue;\n            nameIdx = (findHeader(entry.value, header.name)) ? i : nameIdx;\n            idIdx = (findHeader(entry.value, header.id)) ? i : idIdx;\n            classIdx = (findHeader(entry.value, header.class)) ? i : classIdx;\n            checkInIdx = (findHeader(entry.value, header.checkIn)) ? i : checkInIdx;\n            checkOutIdx = (findHeader(entry.value, header.checkOut)) ? i : checkOutIdx;\n            printIdx = (findHeader(entry.value, header.print)) ? i : printIdx;\n        }\n        return {id:idIdx, name:nameIdx, class:classIdx, checkIn:checkInIdx, checkOut:checkOutIdx, print:printIdx};\n    }\n\n    async readList(idIdx, tS = this.state.sheetInfo.sheet)\n    {\n        if (idIdx in this.state.sheetInfo.cachedList)\n            return this.state.sheetInfo.cachedList[idIdx];\n\n        let rowIdx = 0;\n        const ROW_RANGE = 200;\n        let ids = [];\n        if (!tS)\n            return [];\n        let lastIdx = null;\n        const rowSize = tS.rowCount;\n        while (rowIdx < rowSize-1)\n        {\n            // Read ROW_RANGE cell\n            const increment = Math.min(rowSize - rowIdx, ROW_RANGE);\n            const query = String.fromCharCode(ASCII_A+idIdx) + (rowIdx+1) + \":\" +\n                          String.fromCharCode(ASCII_A+idIdx) + (rowIdx+increment);\n            console.log(toString(idIdx) + \" \" + query);\n            await tS.loadCells(query);\n\n            let nullCount = 0;\n            for (let i = 0 ; i < ROW_RANGE ; i++)\n            {\n                const entry = tS.getCell(rowIdx + i, idIdx);\n                let id = null;\n                if (entry.valueType == null)\n                {\n                    nullCount++;\n                }\n                else\n                {\n                    id = entry.value;\n                    lastIdx = rowIdx + i;\n                }\n                ids.push(id);\n            }\n            // If all ROW_RANGE cells are empty, stop reading\n            if (nullCount === ROW_RANGE) break;\n            rowIdx += increment;\n        }\n        ids[0] = \"\";\n        ids = ids.slice(0, lastIdx+1);\n\n        this.state.sheetInfo.cachedList[idIdx] = ids;\n\n        return ids;\n    }\n\n    async getStudent(id) {\n        const todaySheet = this.state.sheetInfo.sheet;\n        if (!todaySheet)\n            return null;\n\n        // Locate student in the spreadsheet today\n        let studentNumber = id;\n        let studentRowNumber = await this.findStudentRow(studentNumber);\n\n        if (!studentRowNumber) {\n            return null;\n        }\n\n        const header = this.state.sheetInfo.header;\n        // Student ID is found\n        console.log(\"Student ID: \" + studentNumber + \" Index:\" + studentRowNumber);\n        const query = String.fromCharCode(ASCII_A) + (studentRowNumber) + \":\" +\n                      String.fromCharCode(ASCII_A+MAX_COLUMN-1) + (studentRowNumber);\n        console.log(query);\n        await todaySheet.loadCells(query);\n        const idx = studentRowNumber - 1;\n        console.log(\"Get Cell \" + idx + \" \" + header.name);\n        const name = todaySheet.getCell(idx, header.name);\n        const checkIn = todaySheet.getCell(idx, header.checkIn);\n        const checkOut = todaySheet.getCell(idx, header.checkOut);\n\n        return {idx: idx, name: name, checkIn: checkIn, checkOut: checkOut};\n    }\n\n    async updateCell()\n    {\n        const todaySheet = this.state.sheetInfo.sheet;\n        if (!todaySheet)\n            return null;\n        await todaySheet.saveUpdatedCells();\n    }\n\n    async findStudentRow(ID) {\n        const idList = await this.readList(this.state.sheetInfo.header.id);\n        console.log(\"finding student row \" + idList.length);\n        for (let i = 0 ; i < idList.length ; i++)\n        {\n            if (idList[i] && idList[i] === ID) return i + 1;\n        }\n        return null;\n    }\n\n    async findMostRecentSheet() {\n        let sheetDate = new Date();\n        let today = new Date();\n        while (dateDiffInDays(today, sheetDate) < 40)\n        {\n            const sheetInfo = await this.sheetsByDate(sheetDate);\n            if (sheetInfo)\n                return sheetInfo;\n            sheetDate.setDate(sheetDate.getDate() - 1);\n        }\n        return null;\n    }\n}\n\nexport default Doc;\n\n","export const spreadsheetID = {production: \"1FqeRNFlZZ7aJdtYRmjZ1kRb2-sarN9aoTMGyu4jhGKs\",\n                              development: \"12AWolV6lI99LM6NNP1bUwYanAuNDSWRJI8X4-ozM98Q\"};\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Scan from \"./pages/Scan\";\r\nimport Print from \"./pages/Print\";\r\nimport Manual from \"./pages/Manual\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Zoom } from \"react-toastify\";\r\nimport { HashRouter as Router, Routes, Route, Link} from \"react-router-dom\";\r\nimport Doc from \"./Doc\";\r\n\r\nconst doc = new Doc();\r\nfunction App() {\r\n    useEffect(function () {\r\n        async function initialize() {\r\n            console.log(\"Initialize app\");\r\n            console.log(process.env.APP_NAME);\r\n            console.log(process.env.APP_VERSION);\r\n            doc.openDoc();\r\n        }\r\n        initialize();\r\n    }, []);\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <nav id=\"nav\">\r\n                    <table id=\"nav\"><tbody>\r\n                    <tr>\r\n                        <td id=\"nav_item\">\r\n                            <Link to=\"/\"><button id=\"nav_scan\">Scan</button></Link>\r\n                        </td>\r\n                        <td id=\"nav_item\">\r\n                            <Link to=\"/manual\"><button id=\"nav_manual\">Manual</button></Link>\r\n                        </td>\r\n                        <td id=\"nav_item\">\r\n                            <Link to=\"/print\"><button id=\"nav_print\">Print</button></Link>\r\n                        </td>\r\n                    </tr>\r\n                    </tbody></table>\r\n                </nav>\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <div className=\"App\">\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Scan doc={doc} />} />\r\n                    <Route path=\"/print\" element={<Print doc={doc}/>} />\r\n                    <Route path=\"/manual\" element={<Manual doc={doc}/>} />\r\n                </Routes>\r\n\r\n                <ToastContainer\r\n                    position=\"bottom-center\"\r\n                    autoClose={3000}\r\n                    hideProgressBar={false}\r\n                    newestOnTop\r\n                    closeOnClick\r\n                    rtl={false}\r\n                    draggable\r\n                    pauseOnHover\r\n                    pauseOnFocusLoss={false}\r\n                    transition={Zoom}\r\n                    icon={false}\r\n                />\r\n                <h2>\r\n                    v {process.env.REACT_APP_VERSION}\r\n                </h2>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}